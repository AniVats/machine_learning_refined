"<html><head><title>Stephen McCamant</title></head>\n<body bgcolor=\"#c0c0d0\">\n<table><tbody><tr> <td><img width=\"150\" height=\"169\" src=\"small-head.jpeg\"></td><td> Stephen McCamant<br> Associate\nProfessor<br> <a href=\"http://www.cs.umn.edu/\">Department of Computer\nScience &amp; Engineering</a><br> 4-192 <a href=\"http://www1.umn.edu/twincities/maps/KHKH/\">Keller Hall</a>\n(mailing address) / 4-225E Keller Hall (office location)<br> 200 Union\nSt. SE.<br> <a href=\"http://www.umn.edu\">University of Minnesota (Twin\nCities)</a><br> Minneapolis, MN, 55455<br> <a href=\"mailto:mccamant@cs.umn.edu\"><tt>mccamant@cs.umn.edu</tt></a><br>\nThis home page: <a href=\"http://www.cs.umn.edu/~mccamant/\">http://www.cs.umn.edu/~mccamant/</a><br>\nOffice hours: Wednesdays 1-2pm, second hour TBA, or by appointment (please email). I am\nalso usually available at least for short discussions whenever my\noffice door is open.  </td></tr></tbody></table>\n<hr>\n\n<h4>News</h4>\n\n<!--\n<p>This spring, my students and I attended and presented at NDSS/<a\nhref=\"https://www.ndss-symposium.org/bar-workshop-programme/\">BAR</a>,\n<a\nhref=\"https://conf.researchr.org/program/vee-2018/program-vee-2018\">VEE</a>/ASPLOS,\nUSE/<a href=\"http://www.es.mdh.se/icst2018/program/\">ICST</a>, and <a\nhref=\"https://www.etaps.org/index.php/user-profile/archive/46-etaps-2018/360-tacas-2018-accepted-papers\">TACAS</a>/ETAPS.\n-->\n\n<p>In the spring I'll be teaching a special-topics course about binary\nreverse engineering; this <a href=\"sp2020-reveng-flyer.pdf\">flyer</a>\nhas more details.\n\n</p><p>We've released an updated version of the <a href=\"flowcheck/\">Flowcheck</a> tool, with better compatibility with\nmodern Linux systems.</p>\n\n<p>We've promulgated a technical report\nfrom my project with Qiuchen Yan on <a href=\"http://www.cs.umn.edu/research/technical_reports/view/14-006\">Conservative Signed/Unsigned Type Inference for Binaries using Minimum Cut</a>.</p>\n\n<h4>Biography</h4>\n\n<p>Since the fall of 2012 I've been on the faculty here at the\nUniversity of Minnesota. For the 2008-2012 academic years I was a\npostdoc and project scientist at the University of California,\nBerkeley.</p>\n\n<p>\nI got my M.S. and Ph.D. at MIT, working with <a href=\"http://people.csail.mit.edu/mernst/\">Michael Ernst</a> (now at\nthe University of Washington) and the <a href=\"http://groups.csail.mit.edu/pag/\">Program Analysis Group</a>.\nDuring this time I also spent the summer of 2005 at <a href=\"http://research.microsoft.com/\">Microsoft Research</a> in\nRedmond, working with\n<a href=\"http://research.microsoft.com/~trishulc/\">Trishul\nChilimbi</a> on using dynamically-collected\npoints-to sets to improve the efficiency of software model\nchecking.</p>\n\n<p>Prior to that I got my undergraduate B.A. in\n<a href=\"http://www.cs.berkeley.edu/\">computer science</a> at\nthe <a href=\"http://www.berkeley.edu/\">University of California,\nBerkeley</a>; while there, I worked with the <a href=\"http://harmonia.cs.berkeley.edu/\">Harmonia</a> research\ngroup and helped out at the <a href=\"http://www.ocf.berkeley.edu\">Open\nComputing Facility</a>, among other things.</p>\n\n<p>Though I've spent enough time in California and the East Coast to\nsee some of their advantages as well, I am by birth a midwesterner: I\nwas born and raised in Chicago and Evanston, Illinois. My mother's\nside of the family was from Minneapolis and I still have family here.\n</p><p>\n\n</p><h4>Research</h4>\n\n<p>\nMy primary research interest is applications of program analysis\ntechniques for software security and correctness. This includes binary\nanalysis and transformation, hybrids of dynamic and static analysis\nincluding symbolic execution, information flow and taint analysis,\ninstruction-level hardening and isolation, and applications of\ndecision procedures and proof-assistant tools.\n</p>\n\n<p>\n<a href=\"http://bitblaze.cs.berkeley.edu/fuzzball.html\">FuzzBALL</a>\nis a binary-level symbolic execution tool built on top of the BitBlaze\nplatform. We've used it in several past projects and its source code\nis now available on <a href=\"https://github.com/bitblaze-fuzzball/fuzzball\">GitHub</a>.\n</p>\n\n<p>\nSome of my previous projects have their own web sites:</p>\n\n<ul>\n<li>The <a href=\"http://bitblaze.cs.berkeley.edu/\">BitBlaze</a>\nproject centered at <a href=\"http://www.cs.berkeley.edu/~dawnsong/\">Dawn Song</a>'s research\ngroup at UC Berkeley works on applications of binary analysis in\nsoftware security. While at Berkeley I worked on a series of projects\nrelated to binary-level information-flow analysis, symbolic execution,\nand other security applications.</li>\n\n<li>My Ph.D. research studied a practical technique for <a href=\"flowcheck/\">quantitative\ninformation-flow measurement</a>. Results include a <a href=\"http://groups.csail.mit.edu/pag/pubs/secret-max-flow-pldi2008-abstract.html\">paper</a>\nthat appeared at <a href=\"http://pldi2008.cs.ucr.edu/\">PLDI 2008</a>,\nand the release of our implementation in a tool called <a href=\"flowcheck/\">Flowcheck</a>.</li>\n\n<li>Together with <a href=\"http://www.eecs.harvard.edu/~greg/\">Greg\nMorrisett</a> of Harvard, while I was at MIT, I explored a\nbinary-level technique to efficiently isolate untrusted code\nmodules. For more about the technique, and its implementation in a\ntool named PittSFIeld, see the <a href=\"http://people.csail.mit.edu/smcc/projects/pittsfield/\">PittSFIeld\npage</a>. More recently some of the key ideas in this work have been\nused in Google's <a href=\"http://code.google.com/p/nativeclient/\">Native Client</a>.\n\n</li><li>Earlier at MIT, I looked at some of the things that can go\nwrong when software is upgraded, and how we can use programming\nlanguage and analysis technologies to mitigate those problems (<a href=\"http://people.csail.mit.edu/smcc/projects/upgrades.html\">web\npage</a>).  This work formed the basis of my Master's thesis.</li>\n</ul>\n\n<h4>Publications</h4>\n\n<p>Some recent publications:</p>\n\n<p>\u201cBit-Vector Model Counting using Statistical\nEstimation.\u201d Seonmo Kim and Stephen McCamant. In <a href=\"https://www.etaps.org/index.php/2018/tacas\">24th International\nConference on Tools and Algorithms for the Construction and Analysis\nof Systems (TACAS)</a>, April 2018. Available via <a href=\"https://doi.org/10.1007/978-3-319-89960-2_8\">SpringerLink open\naccess</a>.</p>\n\n<p>\u201cFinding Substitutable Binary Code for Reverse Engineering by\nSynthesizing Adapters.\u201d Vaibhav Sharma, Kesha Hietala, and\nStephen McCamant. In <a href=\"http://www.es.mdh.se/icst2018/\">11th\nIEEE Conference on Software Testing, Validation and Verification\n(ICST)</a>, April 2018. Available via <a href=\"https://doi.org/10.1109/ICST.2018.00024\">IEEE Xplore</a>.</p>\n\n<p>\u201cFast DBT Using Intelligently Learned Rules.\u201d Wenwen Wang,\nStephen McCamant, Antonia Zhai, and Pen-Chung Yew. In <a href=\"https://www.asplos2018.org/\">23rd ACM International Conference\non Architectural Support for Programming Languages and Operating\nSystems (ASPLOS)</a>, March 2018. Available via <a href=\"https://doi.org/10.1145/3173162.3177160\">ACM DL</a>.</p>\n\n<p>\u201cFast PokeEMU: Scaling Generated Instruction Tests Using\nAggregation and State Feedback.\u201d Qiuchen Yan and Stephen\nMcCamant. In <a href=\"https://conf.researchr.org/home/vee-2018\">14th\nACM SIGPLAN/SIGOPS International Conference on Virtual Execution\nEnvironments (VEE)</a>, (co-located with ASPLOS), March\n2018. Available via <a href=\"https://doi.org/10.1145/3186411.3186417\">ACM DL</a>.</p>\n\n<p>\u201cThe Effect of Instruction Padding on SFI Overhead.\u201d\nNavid Emamdoost and Stephen McCamant. In <a href=\"http://www.ndss-symposium.org/ndss2018/bar-workshop-programme/\">Workshop\non Binary Analysis Research (BAR)</a>, co-located with NDSS, February\n2018. Available via <a href=\"http://www.ndss-symposium.org/wp-content/uploads/sites/25/2018/07/bar2018_21_Emamdoost_paper.pdf\">NDSS\nconference</a>.</p>\n\n<p>\u201cVeritesting Challenges in Symbolic Execution of Java.\u201d\nVaibhav Sharma, Michael W. Whalen, Stephen McCamant, and Willem\nVisser. In <a href=\"https://jpf.byu.edu/jpf-workshop-2017/\">Java\nPathfinder Workshop</a>, November 2017. Available via <a href=\"https://doi.org/10.1145/3149485.3149491\">ACM DL</a>.</p>\n\n<p>See also <a href=\"https://dblp.uni-trier.de/pers/hd/m/McCamant:Stephen\">DBLP</a>,\n<a href=\"https://scholar.google.com/citations?user=xx3cu9EAAAAJ\">Google\nScholar</a>.\n\n</p><p>Most of my older papers from MIT (2002-2008) are available <a href=\"http://groups.csail.mit.edu/pag/pubs/Stephen-McCamant.html\">here</a>\non the PAG group's site, and my papers from my postdoc UC Berkeley\n(2008-2012) are available from the <a href=\"http://bitblaze.cs.berkeley.edu/bitblaze-pub.html\">BitBlaze\npublications list</a>.</p>\n\n<h4>Prospective Students</h4>\n\n<p>I'm looking forward to meeting and potentially working with current\nand prospective Minnesota students whose research interests overlap\nwith mine, including software security, binary analysis, symbolic\nexecution, and testing and correctness. If you're a current student,\nplease stop by my office (or email for an appointment) and introduce\nyourself.</p>\n\n<p>If you're a prospective graduate student with interests in these\nareas, I encourage you to apply to Minnesota. Information about the\napplication process is available <a href=\"http://www.cs.umn.edu/admissions/graduate/index.php\">from the\ndepartment</a>.  I'd also be interested in corresponding with\nprospective grad students by email to discuss your and my research\ninterests; <a href=\"http://www.cs.virginia.edu/~evans/advice/prospective.html\">David\nEvans has some good advice</a> on how to do this productively.</p>\n\n<h4>Teaching</h4>\n\n<p>Spring 2020: CSci 2021, <a href=\"http://www-users.cselabs.umn.edu/classes/Spring-2020/csci2021/\">Machine Architecture and Organization</a></p>\n\n<p>Spring 2020: CSci 5980/8980, <a href=\"courses/8980/spring2020/\">Manual and Automated Binary Reverse Engineering</a></p>\n\n<p>Fall 2019: CSci 5271,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Fall-2019/csci5271/\">Introduction to Computer Security</a></p>\n\n<p>Spring 2019: CSci 5271,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Spring-2019/csci5271/\">Introduction to Computer Security</a></p>\n\n<p>Fall 2018: CSci 2021,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Fall-2018/csci2021-010/\">Machine Architecture and Organization</a></p>\n\n<p>Spring 2018: CSci 8271,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Spring-2018/csci8271/\">Security and Privacy in Computing</a></p>\n\n<p>Fall 2017: CSci 5271,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Fall-2017/csci5271/\">Introduction to Computer Security</a></p>\n\n<p>Spring 2016: CSci 2021,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Spring-2016/csci2021/\">Machine Architecture and Organization</a></p>\n\n<p>Fall 2015: CSci 5271,\n<a href=\"http://www-users.cselabs.umn.edu/classes/Fall-2015/csci5271/\">Introduction to Computer Security</a></p>\n\n<p>Spring 2015: CSci 2021,\n<a href=\"old-courses/2021/spring2015/\">Machine Architecture and Organization (personal copy of old site)</a></p>\n\n<p>Fall 2014: CSci 5271,\n<a href=\"old-courses/5271/fall2014/\">Introduction to Computer Security (personal copy of old site)</a></p>\n\n<p>Spring 2014: CSci 8271,\n<a href=\"old-courses/8271/spring2014\">Security and Privacy in Computing (personal copy of old site)</a></p>\n\n<p>Fall 2013: CSci 5271,\n<a href=\"old-courses/5271/fall2013/\">Introduction to Computer Security (personal copy of old site)</a></p>\n\n<p>Spring 2013: CSci 8980-1,\n<a href=\"old-courses/8980/spring2013/\">Program Analysis For Security (personal copy of old site)</a></p>\n\n<h5>Course materials available for reuse:</h5>\n<ul>\n\n<li>Instruction-level rewriting <a href=\"assign/rewrite-2013\">assignment</a>, suitable for an advanced\ncourse in binary analysis, security program analysis, etc.. Based on a\nsimplified version of the PittSFIeld infrastructure, and tested in a\nUMN course in 2013. (Note that my solutions for the first two problems\nare public, so you'll need to modify them if you want to use them in a\ngraded context.)\n</li>\n\n</ul>\n\n<h4>Miscellaneous</h4>\n\n<p>During the spring of 2007, I worked as a TA in\n<a href=\"http://sicp.csail.mit.edu/Spring-2007/\">6.001</a>.\nMy\n<a href=\"http://people.csail.mit.edu/smcc/6.001-sp07/\">tutorial notes</a>\nfrom the semester are available.\n\n\n</p><p>If you're developing or testing tools that operate on C source\n  code, you might want to reuse my <a href=\"http://people.csail.mit.edu/smcc/projects/single-file-programs/\">single-file\n  versions of open-source programs</a>.</p>\n\n<p>As an exercise while teaching myself the\n<ahref=\"http: www.cs.utexas.edu=\"\" users=\"\" moore=\"\" acl2=\"\" \"=\"\">ACL2 system, I\nproved a personal favorite result from pure mathematics, <a href=\"http://en.wikipedia.org/wiki/Goodstein%27s_theorem\">Goodstein's\ntheorem</a>. Here's the (uncommented) <a href=\"http://people.csail.mit.edu/smcc/projects/acl2/goodstein.acl2\">proof\nscript</a>.</ahref=\"http:></p>\n\n<hr>\n<i>Last updated: January 28th, 2020</i>\n\n\n</body></html>"