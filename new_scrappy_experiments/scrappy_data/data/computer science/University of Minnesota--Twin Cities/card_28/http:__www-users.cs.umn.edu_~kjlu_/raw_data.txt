{"email": ["kjlu@umn.edu"], "image": ["images/klu.jpg"], "research_blurb": ["Department of Computer Science & Engineering\n\t\t\t\tUniversity of Minnesota", "For efficiency and flexibility purposes, widely used software systems\nsuch as operating systems and web servers are implemented in unsafe\nprogramming languages, and system designers often prioritize\nperformance over security. As a result, these systems inherently\nsuffer from a variety of vulnerabilities and insecure designs that\nhave been exploited by adversaries to launch critical system attacks.\nSystem attacks constitute a major threat to our cyber world.  The\npast several years have continuously witnessed critical system\nattacks targeting systems belonging to individuals, enterprises, and\ngovernment agencies.\nMy research aims to secure widely used software systems in an\nautomated and practical manner: to help users automatically uncover\nand address security problems without requiring manual effort, and to\nprotect widely used systems (e.g., the Linux kernel) while preserving\ntheir reliability and efficiency. I have been working towards my research\ngoal in the following directions.\n<strong>Enabling precise and scalable whole-kernel analysis</strong>\n<ul class=\"simple\">\n<a class=\"reference external\" href=\"papers/mlta.pdf\">MLTA</a> precisely identifies indirect-call\ntargets in large programs like kernels and browsers using a new\nlayered type analysis.\n<a class=\"reference external\" href=\"papers/cheq.pdf\">CheQ</a> can infer critical semantics in OS\nkernels, e.g., custom error codes, error handling, and security\nchecks.\n</ul>\n<strong>Detecting vulnerabilities and insecure designs</strong>\n<ul class=\"simple\">\n<a class=\"reference external\" href=\"papers/crix.pdf\">Crix</a> and <a class=\"reference external\" href=\"papers/cheq.pdf\">CheQ</a> employ\ncross-checking to find more than 400 new kernel bugs such as missing\ncheck and NULL-pointer dereferencing.\n<a class=\"reference external\" href=\"papers/lrsan.pdf\">LRSan</a> detects lacking-recheck bugs (a checked\nvariable is further modified before being used). 19 new bugs found.\n<a class=\"reference external\" href=\"papers/deadline.pdf\">Deadline</a> defines and detects\ndouble-fetch bugs in OS kernels using both static analysis and\nsymbolic execution. 24 new bugs found.\n<a class=\"reference external\" href=\"papers/tss.pdf\">Target spraying</a> reliably exploits\nuninitialized-use vulnerabilities by employing tailored symbolic\nexecution and guided fuzzing.\n<a class=\"reference external\" href=\"papers/jekyll.pdf\">Jekyll</a> uncovers insecurity with Apple's\ncode signing and app review mechanisms, leading Apple to harden\niOS.\n</ul>\n<strong>Hardening software systems</strong>\n<ul class=\"simple\">\n<a class=\"reference external\" href=\"papers/bunshin.pdf\">Bunshin</a> enforces different and even\nconflicting security mechanisms in a program efficiently,\nusing N-version programming.\n<a class=\"reference external\" href=\"papers/unisan.pdf\">UniSan</a> eliminates the most common\ninformation-leak vulnerabilities is OS kernels.\n<a class=\"reference external\" href=\"papers/aslrguard.pdf\">ASLR-Guard</a> and <a class=\"reference external\" href=\"papers/runtimeaslr.pdf\">RuntimeASLR</a>   harden programs to prevent\ncode-pointers leaks, using compiler techniques and dynamic\ninstrumentation.\n<a class=\"reference external\" href=\"papers/kenali.pdf\">DFI</a> protects data-flow integrity for\ncritical data in OS kernels.\n</ul>\n<strong>Identifying privacy leaks</strong>\n<ul class=\"simple\">\n<a class=\"reference external\" href=\"papers/aapl.pdf\">AAPL</a> employs enhanced data-flow analysis and\npeer-voting to detect suspicous privacy leaks in Android apps.\n<a class=\"reference external\" href=\"papers/supor.pdf\">SUPOR</a> automatically infers sensitive user\ninputs on a large scale.\n</ul>\n<strong>Analyzing malware</strong>\n<ul class=\"simple\">\n<a class=\"reference external\" href=\"papers/derop.pdf\">deROP</a> automatically transforms ROP payload\ninto traditional attack payload, facilitating malware analysis.\n<a class=\"reference external\" href=\"papers/pack-rop.pdf\">Packed ROP</a>, <a class=\"reference external\" href=\"papers/watermark-rop.pdf\">Software Watermarking</a>, and <a class=\"reference external\" href=\"papers/ropsteg.pdf\">RopSteg</a>\ntransform and obfuscate programs.\n</ul>\n<link href=\"css/pubs.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<br/>", " Back to top"]}