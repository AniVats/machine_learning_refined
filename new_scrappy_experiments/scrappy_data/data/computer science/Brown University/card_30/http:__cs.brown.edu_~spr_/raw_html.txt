"<html><head>\n<title>Steven P. Reiss Home Page</title>\n<style type=\"text/css\">\n<!--\n.Text {\n\tfont-family: \"Times New Roman\", Times, serif;\n\tcolor: #000000;\n}\n.Alerts {\n\tfont-family: Arial, Helvetica, sans-serif;\n\tfont-size: 12px;\n\tfont-style: italic;\n\tfont-weight: normal;\n}\nbody {\n\tbackground-color: #FFFFCC;\n}\n.image {\n\tvertical-align: top;\n\tfloat: right;\n\theight: 75px;\n\twidth: 75px;\n}\n-->\n</style>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head>\n\n\n<body text=\"#000000\" link=\"#3333FF\" vlink=\"#551A8B\" alink=\"#FF0000\">\n\n<table width=\"100%\">\n<tbody><tr>\n<td>\n   <img src=\"face.png\" alt=\"Picture of Steven P. Reiss\" border=\"1\" width=\"108\" height=\"120\">\n</td>\n<td align=\"CENTER\">\n<table>\n<tbody><tr> <td align=\"CENTER\"><b><font size=\"+6\">Steven P. Reiss</font></b></td> </tr>\n<tr> <td>Department of Computer Science, Box 1910</td> </tr>\n<tr> <td>Brown University, Providence, RI 02912-1910</td> </tr>\n<tr> <td>Tel: 401-863-7641, Fax: 401-863-7657</td> </tr>\n<tr> <td>Email: <a href=\"mailto:spr@cs.brown.edu\">spr@cs.brown.edu</a></td> </tr>\n<tr> <td>Office: CIT 403</td> </tr>\n</tbody></table>\n</td>\n<td align=\"RIGHT\"><img src=\"inits.png\" alt=\"Initials\" border=\"0\" width=\"108\" height=\"120\">\n</td>\n</tr></tbody></table>\n\n<hr>\n<h1>What's the Latest</h1>\n<ul>\n  <li>\n    <h3>We now have a document that lists\n\t<a href=\"brown_local/studentprojects.pdf\">potential student projects</a> associated with\n\tour research. Note the web version of this document might be out of date and\n\tpeople interested in a project should contact me. (This file is only accessible\n\twithin Brown.  If you do not have access to a Brown Univeristy machine, you can\n\tsend me a request for this via e-mail.)\n   </h3>\n  </li><li>\n    <h3><a href=\"http://www.cs.brown.edu/people/spr/codebubbles\">Code Bubbles</a> now\n\tincludes our version of live programming for real Java programs,\n\tSEEDE (simultaneous execution and editing in a development environemnt.\n   <p>If you have problems installing or compiling code bubbles, contact\n\t<a href=\"mailto:spr@cs.brown.edu\">me via email</a>.\n    </p></h3>\n  </li><li>\n    <h3>The slides for the SoftVis keynote on\n\t  <a href=\"codebubbles/vissoftkeynote.pptx\">The Visualizations of Code Bubbles</a><a>\n\t  are available (warning: this is a large file).\n    </a></h3><a>\n  </a></li><a>\n  </a><li><a>\n    </a><h3><a>There are now ancient (25-30 year old) videos linked from this site for various\n\tof the systems\n\t(</a><a href=\"https://cs.brown.edu/video/332\">Pecan</a>,\n\t<a href=\"https://cs.brown.edu/video/322\">Field</a>,\n\t<a href=\"https://cs.brown.edu/video/321\">Garden</a>,\n\t<a href=\"https://cs.brown.edu/video/325\">Desert</a>,\n\t<a href=\"https://cs.brown.edu/video/323\">Cacti</a>, and\n\t<a href=\"https://cs.brown.edu/video/324\">Bloom</a>).  See what the state of the art was\n\tback then and compare it to today's tools.\n    </h3>\n  </li>\n  <li>\n      <h3>\n      The Code Bubbles environment now includes automatic error correction (spelling,\n      syntax, imports, ...).  The environment has been upgraded to work with the latest\n      versions of Eclipse (which was problematic on the Mac).  The environment is also\n      available for editing JavaScript files for Node.JS development.\n      </h3>\n  </li>\n  <li>\n    <h3>My <a href=\"http://www.cs.brown.edu/people/spr/status.html\">current status</a> (displayed outside my office and updated automatically)</h3>\n  </li><li>\n    <h3>The Code Bubbles programming environment is now available in both source and binary forms. See the web page at <a href=\"codebubbles/index.html\">http://www.cs.brown.edu/people/spr/codebubbles</a> for more information.</h3>\n  </li>\n  <li>\n    <h3>S<sup>6</sup> code search tool is now available. Try the <a href=\"http://conifer.cs.brown.edu/s6\">S<sup>6</sup> web interface</a>.</h3>\n  </li>\n  <li>\n    <h3>DYMEM memory visualization tool is available as part of DYPER.</h3>\n  </li>\n</ul>\n<ul><li>\n    <h3>DYPER dynamic performance analysis tools are available.</h3>\n</li>\n</ul>\n<h1>Research Projects</h1>\n<p>\n  <span class=\"Text\">The overall theme of our research is making programming easier.  We are undertaking a number of\nprojects directed at this goal.  These include:\n  </span>\n</p><ul>\n  <li><span class=\"Text\">\n      <a href=\"research/env.html\"><b>Programming Environments  (PECAN,GARDEN,FIELD,DESERT,CLIME,BUBBLES)</b></a>\n    We have a long history of developing programming environments and the accompanying tools\n    and techniques.  Our recent efforts center around the\n    <a href=\"codebubbles\"><strong>Code Bubbles</strong></a> environment.\n    Code Bubbles is an effort to provide a better, working-set centric, user interface for\n    programming.  It lets the user easily view the variety of software artifacts that are\n    relevant to their current task at the same time on the same screen.  It provides powerful\n    and efficient navigation facilities and a variety of software visualizations.  Recent\n    work within the environment has looked at automatically correcting problems as the\n    user edits, and on implmenting a live programming facility for real Java programs.\n` </span></li>\n  <li><span class=\"Text\"><b>Automatic Bug Repair</b> Our efforts in this area concentrate on using large\n    open source repositories such as GitHub to assist in fixing semantic errors in programs.\n    We are also looking at how to make automatic bug repair practical by integrating the\n    user into the process.</span>\n  </li>\n  <li><span class=\"Text\"><b>Performance Measurement</b>\n\tThis work is summarized as part of the\n\t<a href=\"research/vizdyvise.html\">DYVISE</a> framework which includes low-overhead\n\tperformance monitoring tools with appropiate visualizations and a tool for\n\tautomatically constructing automatic performance models of complex Java systems\n\tin order to do predictive what-if analysis.\n  </span></li>\n  <li><strong><a href=\"research/s6.html\">Semantic-Based Code Search (S<sup>6</sup>)</a></strong>.\n     <span class=\"Text\">Our goal here is to provide a means for the programmer to access the\n    huge repository of open source code that is available on the web without having to read\nand then modify the code that is returned from traditional search engines such as Google\nCodesearch. In S<sup>6</sup> the programmer specifies keywords, test cases, contracts,\nsignatures, security constraints, and a user context. The tool finds relevant code and then\nuses a set of transformations to make that code meet the programmer specifications.</span>\nRecent work here has looked at using the search mechanism to find user interfaces.\n  </li>\n  <li>\n    <span class=\"Text\"><a href=\"research/viz.html\"><b>Software Visualization (VALLEY,CACTI,BLOOM,JIVE,JOVE,VELD,DYPER,DYMEM,DYVISE).</b></a>\n    <img src=\"research/bloom/jive04.gif\" width=\"162\" height=\"153\" class=\"image\">We have been\ndoing software visualization for over 30 years at this point. We started with attempting to \\\nincorporate visualization into a programming environment, first in PECAN, then in GARDEN (with visual programming), and finally in FIELD. After this we started to develop independent visualization systems. The first, CACTI, provided 3D visualizations in various formats of information about a software system, mostly structural data, but including some performance and trace data. The followon system, BLOOM, concentrated on attempting to make it easier for  programmers to specify what they wanted to visualize and then providing a variety of appropriate visualizations. More recently we have been looking into visualizing the dynamics of a large software system as it executes with minimal perturbation and maximal information. JIVE shows basic execution and thread information. JOVE shows basic block counts broken down by thread. VELD is again an attempt to let the programmer define application-specific visualizations, this time of the dynamics of their system.\nDYPER is visual performance monitoring designed for long running servers. It provides statistically accurate performance information within whatever overhead the user allows (e.g. 10%, 1% or even 0.1%). DYMEM is a low-overhead memory visualizer that shows object ownership in a compact visualization for running programs. It can be used to detect memory problems. DYVISE is a general purpose dynamic visualizer that takes minimal programmer input and uses dynamic and static analysis to determine what to visualize, how to instrument the code, and how to provide an appropriate visualization.</span>\nOur most recent efforts are part of the Code Bubbles environment.\n</li></ul>\n<p class=\"Text\">Previous projects (in various states of usability):</p>\n<ul>\t\t\t\t\t\t\t\t\t\t\t\t   L\n  <li class=\"Text\"><strong>PECAN</strong>: A programming environment generator for workstations. This was one of the earliest multiple-view programming environments, running on Apollo and Sun workstations in the early 80's. It featured textual and graphical editors, automatically generated semantic views, dynamic views of the stack, and forward and reverse execution. </li>\n  <li class=\"Text\"><strong><a href=\"research/garden.html\">GARDEN</a></strong>: An environment for combining multiple visual languages in order to do what we called conceptual programming. The idea was to let the programmer develop a system using the most appropriate combination of languages. The system allowed the easy definition of new visual (and textual) languages that could be easily combined and integrated with each other. GARDEN was built on top of a distributed object store, featured multiple threads of control, a complete object programming system where objects were directly executable, facilities for defining the visual syntax and semantics of new languages, visual editors for these languages, browsers, dynamic feedback of programs as they execute, and the start of a compiler to make the whole thing efficient. While the code still compiles, we need to port a few libraries before it can be run again.</li>\n  <li class=\"Text\"><strong><a href=\"research/envfield.html\">FIELD</a></strong>: A comprehensive UNIX programming environment. This was the environment that pioneered what was later to be called control integration, the use of interprocedural messages (and a central message server) as a means of integrating the various tools in a programming environment. Copied by several companies, the code was widely used and served as an educational programming environment here at Brown for several years as well as a development environment for C and early versions of C++. The environment integrated most UNIX programming tools (editors, debuggers, rcs/sccs, make, prof/gprof), provide graphical interfaces to each of these tools, and offered a variety of static program visualizers (call graph, file structure, class hierarchy) and dynamic visualizations (data structure displays, a view of the heap in action, a view of file I/O, performance visualizations). Many portions of the environment still run on Solaris and Linux -- at least enough to demonstrate its capabilities.</li>\n  <li class=\"Text\"><strong><a href=\"research/envdesert.html\">DESERT</a></strong>: Desert was an attempt to go a step beyond FIELD in terms of integration. It initiated the concept of \"fragment integration\", i.e. breaking a program up into logical units or fragments (methods, classes, declarations, etc.) that are tracked separately and can be dynamically combined to show the programmer a view that is relevant to a particular aspect or feature of the system. Desert provided high-quality source views based on the studies of Baecker-Marcus, utilizing FrameMaker as the program editor and dynamically reformatting as the user typed. It featured syntax and semantic-based coloring (i.e. did variable lookup over the whole system on a keystroke basis, coloring types differently from variables from methods from undefined symbols). It also served as the basis for our first attempts at high-quality and high-density software visualizations using 3D techniques (<strong>CACTI</strong> and <strong>VALLEY</strong>). Much of this code still runs, at least here at Brown, although it requires Solaris because of the FrameMaker integration. </li>\n  <li><span class=\"Text\"><a href=\"research/taiga.html\"><strong>Internet-Scale Programming (TAIGA). </strong></a><img src=\"research/taiga/webview01.gif\" width=\"608\" height=\"699\" class=\"image\">Our research here addresses the logical confluence of web services, peer-to-peer computing, grid computing, open source, autonomic computing, and software components. When all of these take off together, all programs share data, computation, and code, and one is left with a world where there is effectively only one program and it is running everywhere and all the time. Our research here is focused on the many issues that will arise as we move to such a world: how to define components, how to integrate privacy and security, dealing with failure as an integral part of all programs, economic and social issues, and frameworks for programming at the appropriate scale and level. As a demonstration program here, we have implemented a suite of tools that provide visualization of what is currently being viewed on the web by category. </span>\n</li></ul>\n<hr>\n\n<h1>Software Systems</h1>\n<p>\n  <span class=\"Text\">Systems currently under development.  For recent status and the latest versions of these systems  please send email\nto <a href=\"mailto:spr@cs.brown.edu\">spr@cs.brown.edu</a>.\n  </span>\n</p><ul>\n<li><span class=\"Text\"><a href=\"codebubbles\"><strong>Code Bubbles</strong></a>.  This is our programming enviornment\nfor Java, Node.JS (JavaScript) and possibly Python development.</span></li>\n<li>\n  <span class=\"Text\"><b><a href=\"ftp://ftp.cs.brown.edu/u/spr/bloom.tar.gz\">Bloom</a>.</b>\nThis is our software visualization system.  It consists of a program instrumentation\npackage for C/C++, a JVMPI package for Java, various analysis frameworks for dynamic program\ndata, a visual query interface, a visualization framework, several visualization methods, and\na number of related items.  </span>\n</li><li>\n  <span class=\"Text\"><b><a href=\"ftp://ftp.cs.brown.edu/u/spr/clime.tar.gz\">Clime</a>. </b>This package represents our constraint-based programming environment. It includes a user interface that shows the programmer current inconsistencies between software artifacts and current style/language problems with the source both textually and graphically. It also includes a variety of tools for analyzing and storing information about different software artifacts including Java source, UML class and interaction diagrams (ROSE and ArgoUml), CVS histories, javadoc documentation, and Junit-based test cases.  </span>\n</li><li><span class=\"Text\"><strong><a href=\"ftp://ftp.cs.brown.edu/u/spr/taiga.tar.gz\">Taiga</a></strong>. This is our experimental framework for Internet-scale computing. It is built on top of a peer-to-peer backbone (based on JXTA) and includes facilities for defining the syntax and semantics of components and for defining web services, libraries, and other servers as implementations of these components. In includes facilities for sharing files and data across the Internet.\n</span>\n</li><li><span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/u/spr/dyvise.tar.gz\"><strong>Dyvise</strong></a>. This is a performance analysis and dynamic visualization framework encompassing a number of tools including DYPER for performance analysis, DYMEM for memory visualization, and DYVIEW for dynamic visualization.</span>\n</li><li><span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/u/spr/s6.tar.gz\"><strong>S<sup>6</sup></strong></a>.\nThis is the code for our semantics-based code search engine.  It includes the code for user interface\nsearch and for searching for test cases.\n</span>\n\n</li></ul>\n<p><span class=\"Text\">\nPrevious systems.  These system are not under active development.  Some, such as\nFIELD and Desert used to work either in full or in part.\n</span>\n</p><ul>\n<li><span class=\"Text\"><strong><a href=\"ftp://ftp.cs.brown.edu/u/spr/clime.tar.gz\">Chet</a></strong>. This is our tool for checking dynamic specifications in software systems. It is able to handle large numbers of specifications in relatively large and realistic Java systems in a practical way. Currently it is only availabe as part of the Clime environment.\n</span>\n</li><li class=\"Text\"><strong><a href=\"ftp://ftp.cs.brown.edu/u/spr/jivebin.tar.gz\">Jive and Jove</a></strong>. These are our dynamic Java visualization tools. It is available separately in binary form or in source form as part of Bloom.\n</li><li><span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/u/spr/veld.tar.gz\"><strong>Veld.</strong></a> This is another visualization framework. It is aimed at dynamic visualization of Java programs where the programmer can quickly define what should be visualized and the system automatically does the instrumentation and runs the program with an appropriate visualization.</span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/bb.tar.Z\"><b>bb.</b></a>\nThis is the text editor that was\nfirst implemented circa 1980 and has been maintained and updated since.  A cheap and viable\nalternative to vi or emacs.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/u/spr/bwe.tar.gz\"><b>BWE.</b></a>\nThis is our old userinterface toolkit.\tIt predates Motif, but works nicely (and quicly)\nwith X11.  Although not widget-based, it is quite flexible and simple from a programmer's\nperspective.  It is required for FIELD.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/ccel\"><b>CCEL.</b></a>\nThis ia an old C++ lint-like constraint checker with user-definable rules.  I doubt\nif it still runs, but who knows.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/cppp.tar.Z\"><b>CPPP.</b></a>\nA C++ front end for the language in 1986 with only partial support for templates.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"http://www.cs.brown.edu/software/desert\"><b>Desert.</b></a>\nThis is a C++/C programming environment (with some support for Java) that uses FrameMaker\nfor program editing.  It requires FOREST.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/dl.tar.Z\"><b>dl.</b></a>\nThis is a very old incremental loader for COFF format files.  Probably not very usable\nany more.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/u/spr/bwefield.tar.gz\"><b>FIELD.</b></a>\nThe Friendly Integerated Environment for Learning and Development, FIELD is an integration\nof various UNIX tools combined with a number of our own tools for software visualization.\nIt is probably no longer fully functional, but parts of it do run and could be interesting.\nIt served as the basis for DEC Fuse way back when.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/forest.tar.Z\"><b>Forest.</b></a>\nA package of C++ utilities including a nice object-oriented interface to Motif, a\ndatabase query engine, and a Java parser.  Required for Desert.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/garden.tar.Z\"><b>Garden.</b></a>\nOur circa 1985 visual programming environment, Garden provided support for user-defined\nvisual languages and the ability to combine them in arbitrary ways in a single system.\nThe package no longer will compile/run (the threads library used by Garden is long\nout of date).\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/idyl.tar.Z\"><b>Idyl.</b></a>\nThis is an old incremental loader for COFF format files.  It is a cleaned-up and\nmuch better implementation of dl.  However, it was never ported to ELF\nand is no longer used.\tHowever, it was much more efficient than later incremental\nloaders such as Sun's ild.\n  </span>\n</li><li>\n  <span class=\"Text\"><a href=\"ftp://ftp.cs.brown.edu/pub/oopas.tar.Z\"><b>OOPas.</b></a>\nAn object Pascal preprocessor that accepts most Turbo\nPascal extensions and produces Sun Pascal.\n  </span>\n</li></ul>\n\n\n<hr>\n<h1>Teaching</h1>\n<h2>Courses (2019-2020):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n</ul>\n<h2>Courses (2018-2019):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2340\"><strong>CSCI2340: Topics in Software Engineering</strong></a>. This is a seminar course on topics related to software engineering. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n</ul>\n<h2>Courses (2017-2018):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1260\"><strong>CSCI1260: Compilers and Program Analysis</strong> </a>\nThis couirse teaches basic compiler techniques (lexical, syntactic, semantic analysis, and code\ngeneration), as well as compoiler optimization throry and techniques.  The application of these\nto program analysis, both static and dynamic is also considered.</li>\n</ul>\n<h2>Courses (2016-2017):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2340\"><strong>CSCI2340: Topics in Software Engineering</strong></a>. This is a seminar course on topics related to software engineering. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n</ul>\n<h2>Courses (2015-2016):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1260\"><strong>CSCI1260: Compilers and Program Analysis</strong> </a>\nThis couirse teaches basic compiler techniques (lexical, syntactic, semantic analysis, and code\ngeneration), as well as compoiler optimization throry and techniques.  The application of these\nto program analysis, both static and dynamic is also considered.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n</ul>\n<h2>Courses (2013-2014):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This course teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1950i\"><strong>CSCI1950i: Designing, Creating, and Developing User Interfaces</strong></a>. This is aa new course on user interface design and development.  In addition to covering basic HCI, it is project-based with an emphasis on group work. </li>\n</ul>\n<h2>Courses (2012-2013):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This is a new course that teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2310\"><strong>CSCI2310: User Interface Design</strong></a>. This is a graduate seminar on user interface and human factors. The topics studied vary from year to year depending on the interests of the students. </li>\n</ul>\n<h2>Courses (2011-2012):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0931\"><strong>CSCI0931: Introduction to Computation for the Humanities and Social Sciences.</strong></a> This course that looks at problems in the humanities and social sciences that can be solved using appropriate data analysis and computation. It concentrates on application problems and not on programming or mathematics. This course is the result of a NSF CPATH project we have been working on.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This is a new course that teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2340\"><strong>CSCI2340: Topics in Software Engineering</strong></a>. This is a seminar course on topics related to software engineering. </li>\n</ul>\n<h2>Courses (2010-2011):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0931\"><strong>CSCI0931: Introduction to Computation for the Humanities and Social Sciences.</strong></a> This course that looks at problems in the humanities and social sciences that can be solved using appropriate data analysis and computation. It concentrates on application problems and not on programming or mathematics. This course is the result of a NSF CPATH project we have been working on.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1320\"><strong>CSCI1320: Creating Modern Web Applications</strong></a>. This is a new course that teaches students the concepts needed for creating interactive web applications using modern technology. It covers topics including user interface and web design, basic HTML, Javascript, and Php, frameworks such as Django and Ruby, Java-based coding using servlets and GWT, security, testing, scaling to handle large numbers of users, internationaliation and accessibility. Students in the course work in teams to build a working web application for an outside client. Clients this year included campus organizations, non-profits, local companies, and Brown enterprenurial students.</li>\n  <li><strong><a href=\"http://www.cs.brown.edu/courses/csci1600\">CSCI1600: Embedded and Real-Time Programming</a></strong>. This course teaches the concepts needed to create software-controlled embedded and real time systems. Topics include basic hardware and low-level software concepts, real time scheduling, modeling real time and embedded systems, and proving properties of the systems.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2330\"><strong>CSCI2330: Programming Environments</strong></a>. This is a seminar course on topics related to programming environments. This year we worked on new programming tools to address mutlicore, threaded and distributed programming. </li>\n</ul>\n<h2>Courses (2009-2010):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0931\"><strong>CSCI0931: Introduction to Computation for the Humanities and Social Sciences.</strong></a> This is a new course that looks at problems in the humanities and social sciences that can be solved using appropriate data analysis and computation. It concentrates on application problems and not on programming or mathematics. This course is the result of a NSF CPATH project we have been working on.</li>\n</ul>\n<h2>Courses (2008-2009):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0190\"><strong>CSCI0190 (CS019): Accelerated introduction to programming and data structures.</strong></a> This coursecombines the first two traditional courses (csci0150 and csci0160, object-oriented programming and algorithms and data structures respectively) into a single course for students with a prior programming background.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0320\"><strong>CSCI0320 (CS032): Introduction to Software Engineering</strong>.</a> This is a sophomore level software engineering course  covering both advanced programming topics such as threads, user interfaces, web applications and software architecture, as well as project engineering and agile programming. Students design and write a team project. Homework assignments other than the project have been chosen to demonstrate different applications including computational biology, physics and natural language processing. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2310\"><strong>CSCI2340 (CS234): Topics in Software Engineering</strong></a>. This is a graduate seminar on software engineering. The topics studied vary from year to year depending on the interests of the students.</li>\n</ul>\n<h2>Courses (2007-2008):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0190\"><strong>CSCI0190 (CS019): Accelerated introduction to programming and data structures.</strong></a> This is a new course that combines the first two traditional courses (csci0150 and csci0160, object-oriented programming and algorithms and data structures respectively) into a single course for students with a prior programming background.</li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0320\"><strong>CSCI0320 (CS032): Introduction to Software Engineering</strong>.</a> This is a sophomore level software engineering course  covering both advanced programming topics such as threads, user interfaces, web applications and software architecture, as well as project engineering and agile programming. Students design and write a team project. Homework assignments other than the project have been chosen to demonstrate different applications including computational biology, physics and natural language processing.  </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2310\"><strong>CSCI2310 (CS231): User Interface Design</strong></a>. This is a graduate seminar on user interface and human factors. The topics studied vary from year to year depending on the interests of the students. </li>\n</ul>\n<h2>Courses (2006-2007):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci2330\"><strong>CS233: Programming Environments</strong></a>. This is a seminar course on topics related to programming environments. This year we studied a collection of 30 papers relating to future directions for programming environments and concentrating on program analysis and verification. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1600\"><strong>CS160: Embedded and Real-Time Programming</strong></a>. Otherwise known as the pinball course. This is a hands-on course in real time and embedded computing. For the project this year we took a 1979 Pinball machine (LaserBall) and replaced its CPU board with a connection to a linux box using a NI DIO card. The students had to write all the real time software to control the lights, switches, solenoids, and displays as well as provide a fun and workable pinball game. Lectures covered the underlying theory and practice of real time and embedded programming. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0320\"><strong>CS032: Introduction to Software Engineering</strong></a>. This is a sophomore level software engineering course covering both advanced programming topics such as threads, user interfaces, web applications, and software architecture, as well as project engineering and agile programming. Students design and write a team project.</li>\n</ul>\n<h2>Courses (2005-2006):</h2>\n<ul>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci1260\"><strong>CS126: Introductory Compiler Construction.</strong> </a>This is a traditional compiler course updated to emphasize modern compiler techniques. While lexical analysis, parsing, semantic analysis and code generation are all covered, we also spend 1/4 of the course covering compiler optimization theory and techniques. Students write a compiler for a simple object-oriented language, Decaf, for x86. </li>\n  <li><a href=\"http://www.cs.brown.edu/courses/csci0320\"><strong>CS032: Introduction to Software Engineering</strong></a><strong>.</strong> This is a sophomore level software engineering course taught in Java covering both advanced programming topics such as threads, user interfaces, and software architecture, as well as project engineering and agile programming. Students design and write a team project.</li>\n</ul>\n<h2>Courses (2004-2005): </h2>\n<ul>\n  <li class=\"Text\"><strong><a href=\"http://www.cs.brown.edu/courses/cs009-3\">CS009-03: Building a Web Application</a></strong>. This is a freshman seminar where the students will work as a team to build, test, and deploy a web application.</li>\n  <li class=\"Text\"><a href=\"courses/cs231.html\"><b>CS231: Human Factors and User Interface Design.</b></a> This is a graduate seminar in covering various topics in user interfaces. The course is taught alternate years and tends to cover different topics each time it is taught. Possible topics this year include device-independent user interfaces and 3D desktops. </li>\n  <li class=\"Text\"><strong>CS234: Topics in Software Engineering</strong>. This is a graduate seminar that will cover some set of relevant topics related to software engineering. (With Shriram Krishnamurthi.) </li>\n  <li class=\"Text\"><a href=\"../../courses/cs032\"><b>CS32: Introduction to Software Engineering.</b></a> This is the course I have developed over the past 10 years and is the model for the text book \"A Practial Introduction to Software Design with C++\". </li>\n</ul>\n<h2>Courses (2003-2004):</h2>\n<ul>\n<li> <span class=\"Text\"><a href=\"http://www.cs.brown.edu/courses/cs233\"><strong>CS233: Programming Environments</strong></a>. Here we studied modern programming tools and the class project involved implementing a scriptable debugger for C/C++ under Linux.\n</span>\n</li><li><span class=\"Text\"><b><a href=\"http://www.cs.brown.edu/courses/cs126\">CS126: Introductory Compiler Construction</a>.</b> This is an undergraduate course in compiler construction. The course will be a hands-on course where the students will develop an optimizing compiler for a subset of Java generating SPARC assembly code. The course will be evenly split between parsing (including lexical analysis), semantic analysis, and optimization.\n  </span>\n</li><li><span class=\"Text\"><a href=\"../../courses/cs032\"><b>CS32: Introduction to Software Engineering.</b></a> This is the course I have developed over the past 10 years and is the model for the text book \"A Practial Introduction to Software Design with C++\". </span>\n</li></ul>\n<h2>Previous courses</h2>\n<p>\nOther courses I have taught in the last few years. Some of them I still teach, while others\nare now taught by other faculty members.\n</p><ul><li>\n  <span class=\"Text\"><a href=\"../../courses/cs190\"><b>CS190: Software Systems Design.</b></a> This ia a senior-level\nproject course where students work in teams of ten to learn software engineering and to build\na useful system.\n  </span>\n</li><li class=\"Text\"><strong><a href=\"http://www.cs.brown.edu/courses/cs178\">CS178: Programming Parallel and Distributed Systems</a></strong>. This course covered the basics of distributed systems, web computing, and parallel computing using MPI. </li></ul>\n\n<hr>\n<h1>Books</h1>\n<ul>\n<li>\n  <span class=\"Text\"><a href=\"designbook/index.html\"><b>A Practial Introduction to Software Design with\nC++.</b></a> This is a text book for an advanced programming or introductory software\nengineering course.  It covers a wide range of material including how to use (rather than\nabuse C++), program design at all levels (code, class, module, and system), user interface\ndesign and development, networking, software engineering, design patterns, debugging and\ntesting, and advanced programming techniques.\n  </span>\n</li><li>\n  <span class=\"Text\"><b><a href=\"www.softvis.org\">FIELD: A Friendly Interactive Environment for Learning and Development</a>.</b> This is a\nmonograph that describes the FIELD programming environment in detail.\n  </span>\n</li></ul>\n\n\n<hr>\n<h1>Personal</h1>\n<p>\nHow to reach me:\n</p><dl>\n  <dt><b>Email: </b><a href=\"mailto:spr@cs.brown.edu\">spr@cs.brown.edu</a></dt>\n  <dt><b>Snail Mail:</b></dt>\n  <dl>\n    <dt>Box 1910, Computer Science Department</dt>\n    <dt>Brown University</dt>\n    <dt>Providence, RI 02912</dt>\n  </dl>\n  <dt><b>Phone:</b></dt>\n  <dl>\n    <dt>401-863-7641 (<i>voice</i>)</dt>\n    <dt>401-863-7657 (<i>fax</i>)</dt>\n  </dl>\n</dl>\n<p>\n</p><dl>\n<b>Equipment in my office:</b>\n<dl>\t\t\t\t\t\t\t\t\t\t\t\t   ;\n<dt>5 Machines (2 Linux, 2 Windows, 1 Macintosh)\n</dt><dt>36 cpus (16,8,4,4,4)\n</dt><dt>4 Tb disk\n</dt><dt>340G memory\n</dt><dt>7 monitors\n</dt><dd>&nbsp;</dd>\n</dl>\n<b>Hobbies: </b>\n    <dl>\n      <dt>Gardening (vegetables)</dt>\n      <dt>Hiking Cape Cod</dt>\n      <dt>Softball</dt>\n    </dl>\n</dl>\n<dl>\n<b>Family:</b>\n<dl>\n<dt><strong>Loretta</strong>\n</dt><dt><a href=\"http://researcher.ibm.com/researcher/view.php?person=us-frreiss\"><strong>Frederick</strong></a> (@ IBM Almaden)\n</dt><dt><strong><a href=\"https://www.cs.virginia.edu/people/faculty/reiss.html\">Charles</a></strong> ( @ UVa )\n</dt><dt><strong>Valerie</strong> (@ GA Tech Research Institute)\n</dt></dl>\n</dl>\n\n<hr>\n<p>Last Updated:\n  <!-- #BeginDate format:En2a -->23-May-2019<!-- #EndDate -->\n</p>\n\n\n</body></html>"