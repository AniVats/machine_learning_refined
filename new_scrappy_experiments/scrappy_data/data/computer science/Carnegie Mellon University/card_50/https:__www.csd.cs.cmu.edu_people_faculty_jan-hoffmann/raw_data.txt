{"email": ["jhoffmann@cs.cmu.edu", "csd-marcom-info@cmu.edu?subject=Website%20issue%20or%20question"], "image": ["https://www.csd.cs.cmu.edu/sites/default/files/styles/directory_photos/public/Jan_Hoffman-web-directory.jpg?itok=V94SeUic", "/sites/default/files/media-icons/default/email.png", "/sites/default/files/media-icons/default/facebook.png", "/sites/default/files/media-icons/default/twitter.png", "/sites/default/files/media-icons/default/linkedin.png"], "research_blurb": ["\nMy research mission is to discover beautiful mathematical ideas that have a real-world impact, shape the way programmers think, and help to create software that is more reliable, efficient, and secure.\n\nA main goal of my research is to develop techniques and tools for quantitative analysis and verification that are compositional, efficient, and simple enough to be used by software developers without excessive training.  Realizing this vision involves using techniques from formal methods, programming languages, constraint solving, analysis of algorithms, and design and implementation of systems. Two focus areas for applications of my work are probabilistic programming languages and programming languages for digital contracts.\n\nQuantitative resource-usage analysis of software has inspired some of the most exciting research in computer science, which ranges from systems (e.g., non-blocking algorithms and real-time operating systems) to theory (e.g., complexity theory and analysis of algorithms). Nevertheless, it is still challenging for software developers to understand the quantitative performance characteristics of their code: On the one hand, software systems are increasingly complex, concurrent, and distributed. On the other hand, developers rely more and more on off-the-shelf software libraries and software is executed using cloud services that are black boxes with respect to\nresource usage. The failure of having a precise understanding of the resource usage of programs is at the root of many problems of software:\n\nProbabilistic reasoning is becoming increasingly important in verification. Probabilistic models such as Bayesian Networks and Markov Decision Processes are used to formalize and analyze systems and natural phenomena. For probabilistic and machine-learning algorithms, certain guarantees can only be given with high probability. Additionally, sound static analyses can improve the accuracy and efficiency of probabilistic inference.  It turns out that there are close connections between (manual) quantitative reasoning methods for probabilistic programs and (automatic) resource analyses for deterministic programs. My research group is exploring these connections to develop a unified framework for quantitative verification that unites automatic and interactive techniques to reason about resource usage and probabilistic programs.\n"]}