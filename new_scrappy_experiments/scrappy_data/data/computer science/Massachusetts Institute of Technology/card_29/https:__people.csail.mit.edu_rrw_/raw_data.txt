{"email": [], "image": ["me.jpg", "http://c13.statcounter.com/counter.php?sc_project=1331117&java=0&security=8cfb1ede&invisible=0"], "research_blurb": ["\nAssociate Professor\nMIT CSAIL and EECS\n32 Vassar St, Cambridge, MA 02139 \n", "In general, I try to understand what is easy and what is hard to compute (independently of any particular computer). I work in algorithm design and complexity theory, and I especially like connections between the two subjects. I think about many questions, but a few of them haunt me more than others. Some examples: <i>Can the existence of an algorithm for a problem be used to prove that other algorithms <b>cannot</b> exist for other problems? Can the nonexistence of algorithms be used to prove that another algorithm correctly solves a problem?</i> (In fact, there are \"yes\" answers to both questions!) <i>Does every function implementable with a low memory footprint also have a fast implementation?</i> (Is $P = PSPACE$?) <i>Could computers themselves help us make progress on answering these questions? </i>"]}