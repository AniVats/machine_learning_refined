{"email": ["greg.morrisett@cornell.edu"], "image": ["https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Coq_Belle-Ile.jpg/512px-Coq_Belle-Ile.jpg", "http://www.cs.cornell.edu/~jgm/images/gonative.jpg", "http://www.cs.cornell.edu/~jgm/images/pittsfield.jpg", "http://www.cs.cornell.edu/~jgm/images/morrisett3.jpg", "http://www.cs.cornell.edu/~jgm/images/doctor.jpeg", "http://www.cs.cornell.edu/~jgm/images/ynot.jpg", "http://www.cs.cornell.edu/~jgm/images/robotstxt.jpg", "http://www.cs.cornell.edu/~jgm/images/chili.jpeg", "http://www.cs.cornell.edu/~jgm/images/dhosa.jpeg", "http://www.cs.cornell.edu/~jgm/images/uamp-1_large.jpg", "http://www.cs.cornell.edu/~jgm/images/crash.jpeg", "http://wyss.harvard.edu/staticfiles/robobeeillust.jpg"], "research_blurb": ["<table border=\"0\" cellpadding=\"2\" cellspacing=\"2\" style=\"text-align:\">\n<tbody>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://commons.wikimedia.org/wiki/File%3ACoq_Belle-Ile.jpg\" title=\"By Remi Jouan (Photo taken by Remi Jouan) [GFDL (http://www.gnu.org/copyleft/fdl.html), CC-BY-SA-3.0 (http://creativecommons.org/licenses/by-sa/3.0/) or CC BY-SA 2.5-2.0-1.0 (http://creativecommons.org/licenses/by-sa/2.5-2.0-1.0)], via Wikimedia Commons\"><img alt=\"Coq Belle-Ile\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/8/81/Coq_Belle-Ile.jpg/512px-Coq_Belle-Ile.jpg\" width=\"55px\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.cs.princeton.edu/~appel/certicoq/\"><b>CertiCoq:</b></a>\n<span class=\"project\">\n       The CertiCoq project aims to build a proven-correct compiler for dependently-typed, functional languages, such as Gallina--the core language of the Coq proof assistant. A proved-correct compiler consists of a high-level functional specification, machine-verified proofs of important properties, such as safety and correctness, and a mechanism to transport those proofs to the generated machine code. The project exposes both engineering challenges and foundational questions about compilers for dependently-typed languages. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://sos.cse.lehigh.edu/gonative/\">\n<img alt=\"GoNative\" src=\"http://www.cs.cornell.edu/~jgm/images/gonative.jpg\" style=\"width: 55px; height: 55px;\"/>\n</a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://sos.cse.lehigh.edu/gonative/\"><b>GoNative:</b></a>\n<span class=\"project\">\n       This project is a joint effort with researchers at Lehigh and Harvard,\n       and focuses on low-overhead techniques for providing security\n       guarantees to software systems in which type-safe languages\n       such as Java interoperate with native C, C++, and assembly\n       code.</span><br/>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://robobees.seas.harvard.edu/\">\n<img alt=\"Robobee\" src=\"http://wyss.harvard.edu/staticfiles/robobeeillust.jpg\" style=\"width: 55px; height: 55px;\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://robobees.seas.harvard.edu/\"><b>RoboBees:</b></a>\n<span class=\"project\">\n       Inspired by the biology of a bee and the insect's hive behavior, we\n       aim to push advances in miniature robotics and the design of compact\n       high-energy power sources; spur innovations in ultra-low-power\n       computing and electronic \"smart\" sensors; and refine\n       coordination algorithms to manage multiple, independent\n       machines. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img alt=\"Crash\" src=\"http://www.cs.cornell.edu/~jgm/images/crash.jpeg\" style=\"width: 55px; height:55px;\"/>\n</td>\n<td style=\"vertical-align: top;\">\n<a></a><a href=\"http://www.crash-safe.org/\"><b>CRASH-SAFE:</b></a>\u00a0 \n      <span class=\"project\">\n        This DARPA-funded project is focused on a clean slate design \n        for resiliant and secure systems.  A joint project between \n        researchers at BAE, Penn, Northeastern, and Harvard, we are \n        designing new hardware, new languages, and new systems\n        services oriented towards security.  A key distinguishing \n        element is our pervasive use of formal methods, and strong \n        emphasis on hardware-software co-design. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img alt=\"CHILI\" src=\"http://www.cs.cornell.edu/~jgm/images/chili.jpeg\" style=\"width: 55px; height: 55px;\"/>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://safecode.cs.illinois.edu/chili/index.html\"><b>CHILI:</b></a>\u00a0 \n      <span class=\"project\">\n         An IARPA-sponsored joint project between Cornell, Harvard, and \n         the University of Illinois where we are focused on the STONESOUP \n         agenda:  Securely Taking on New Executable Software of Unknown \n         Provenance.  Our project is utilizing LLVM and its Secure Virtual \n         Architecture, coupled with information flow analysis, dynamic \n         rewriting, and compiler verification. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img alt=\"DHOSA\" src=\"http://www.cs.cornell.edu/~jgm/images/dhosa.jpeg\" style=\"width: 55px; height: 55px;\"/>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.dhosa.org\"><b>DHOSA:</b></a>\u00a0 \n      <span class=\"project\">\n          Defending Against Hostile Operating Systems.  This MURI\n          project combines researchers from Berkeley, Virginia, \n          Illinois, Stony Brook and Harvard to address new approaches\n          and techniques for building applications that can be secure \n          in spite of a faulty or even malicious operating system. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img align=\"left\" alt=\"Ynot\" src=\"http://www.cs.cornell.edu/~jgm/images/ynot.jpg\" style=\"width: 55px; height: 55px;\"/>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://ynot.cs.harvard.edu/\"><b>Ynot:</b></a>\n<span class=\"project\">\n        The goal of the Ynot project is to explore the design, implementation,\n        and use of next-generation type systems.  In particular, we are focusing\n        on the integration of powerful program logics into the type system of\n        an ML-like, higher-order, imperative programming language, \n        making it possible to specify the desired effects of programs and\n        prove correctness.  <br/> </span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img alt=\"LLVMmd\" src=\"http://www.cs.cornell.edu/~jgm/images/doctor.jpeg\" style=\"width: 55px; height:55px;\"/>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://llvm-md.org\"><b>LLVMmd:</b></a>\u00a0\n      <span class=\"project\">\n        We are building a <i>translation validator</i> which automatically\n        verifies that compiler optimizations are correct.  Our tools\n        work by analysing two LLVM programs and then tries to construct \n        a proof they have the same meaning. Our tools do not require any \n        integration with the optimizer to work, and can also be used on \n        hand-optimized code.  The work is focused around scaling this \n        technique to a real-world compiler such as LLVM. <br/></span>\n</td>\n</tr>\n</tbody>\n<tbody><tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://nobot.cis.upenn.edu\">\n<img alt=\"Nobot\" src=\"http://www.cs.cornell.edu/~jgm/images/robotstxt.jpg\" style=\"width: 55px; height: 55px;\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://nobot.cis.upenn.edu/\"><b>NoBot:</b></a>\n<span class=\"project\">\n      We address the problem of threats to networked systems from\n      botnets. Our approach is to design a programmable \n      platform for innovation, the NoBot Programming Environment \n      (NOPE),which may reside on a variety of nodes that are operated by network \n      providers such as commercial ISPs or DISA. NOPE provides \n      facilities for data collection, data analysis and policy \n      distribution, creating a coordinated set of nodes which \n      collaborate to overcome the botnet threat. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://cyclone.thelanguage.org/\">\n<img align=\"left\" alt=\"Cyclone\" src=\"http://www.cs.cornell.edu/~jgm/images/cyclone_logo.jpg\" style=\"border: 0px solid ; width: 55px; height: 55px;\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://cyclone.thelanguage.org/\"><b>Cyclone:</b></a>\n<span class=\"project\">\n      Cyclone is a type-safe dialect of C that\n      provides good control over data representations and memory management\n      without sacrificing safety. It uses a combination of novel\n      technologies,\n      including region-based types, wrapped libraries, and link-time checking\n      to achieve these goals. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.eecs.harvard.edu/~mdw/proj/mp/\">\n<img align=\"left\" alt=\"Sensor Mote\" src=\"http://www.cs.cornell.edu/~jgm/images/uamp-1_large.jpg\" style=\"border: 0px solid ; width: 55px; height: 55px;\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.eecs.harvard.edu/~mdw/proj/mp/\">\n<b>Macroprogramming Sensors:</b></a>\n<span class=\"project\">\n      We are investigating high-level languages for\n      programming diverse, distributed networks of inexpensive sensors.\n      Our goal is to greatly simplify sensor network application design by providing\n      high-level programming abstractions, and primitives that automatically\n      compile down to the complex, low-level operations implemented by each\n      sensor node. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<img alt=\"Pittsfield Police\" src=\"http://www.cs.cornell.edu/~jgm/images/pittsfield.jpg\" style=\"width: 55px; height: 55px;\"/><br/>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://pag.csail.mit.edu/~smcc/projects/pittsfield/\"><b>PittSFIeld</b></a>:\u00a0\n      <span class=\"project\">\n<a href=\"http://pag.csail.mit.edu/~smcc/\">Stephen McCamant</a>\n      (MIT) and I developed an efficient software-based fault isolation (SFI)\n      tool for Intel x86 code. The tool can be used to restrict a process\n      from reading, writing, or executing addresses outside a specified range\n      without the need for hardware-based process isolation.  Google adopted\n      the ideas behind this technology for their NativeClient plugin\n      framework. <br/></span>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.cs.cornell.edu/talc\">\n<img align=\"left\" alt=\"Types Inside\" src=\"http://www.cs.cornell.edu/talc/images/tal-logo-small.gif\" style=\"width: 55px; height: 55px;\"/></a>\n</td>\n<td style=\"vertical-align: top;\">\n<a href=\"http://www.cs.cornell.edu/talc\"><b>Typed Assembly Language:</b></a>\n<span class=\"project\">\n        A type system for the Intel x86 assembly language. The TAL type system is rich\n        enough that we can efficiently encode a number of high-level language constructs, yet it\n        is still possible to statically verify that the machine code\n        will respect type safety when executed. The latest release (2.0) of\n        the TAL tools can be found \n        <a href=\"http://www.cs.cornell.edu/Info/People/jgm/talc-2.0.zip\">here</a>.<br/></span>\n</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<hr style=\"height: 2px; width: 100%;\"/>"]}