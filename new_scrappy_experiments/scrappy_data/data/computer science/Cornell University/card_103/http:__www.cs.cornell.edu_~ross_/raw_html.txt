"<html><head>\n\t\t<title>Ross Tate</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n\t\t<script type=\"text/javascript\" async=\"\" src=\"http://www.google-analytics.com/ga.js\"></script><script type=\"text/javascript\" src=\"jwplayer.js\"></script>\n\t\t<script type=\"text/javascript\">\n\n\t\t\tvar _gaq = _gaq || [];\n\t\t\t_gaq.push(['_setAccount', 'UA-33661415-1']);\n\t\t\t_gaq.push(['_trackPageview']);\n\n\t\t\t(function() {\n\t\t\tvar ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t\t\tga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t\t\t})();\n\n\t\t</script>\n\t\t<link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css\">\n\t\t<script src=\"https://code.jquery.com/jquery-1.9.1.js\"></script>\n\t\t<script src=\"https://code.jquery.com/ui/1.10.2/jquery-ui.js\"></script>\n\t\t<script>\n\t\t  $(function() {\n\t\t    $( \"#slider-vertical\" ).slider({\n\t\t      orientation: \"vertical\",\n\t\t      range: \"min\",\n\t\t      min: 0,\n\t\t      max: 13,\n\t\t      value: 9,\n\t\t      slide: function( event, ui ) {\n\t\t        value = ui.value;\n\t\t        if (value-- == 0) {\n\t\t        \trossfull = ross = \"RossHandstand.jpg\";\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossDyedThumb.jpg\";\n\t\t        \trossfull = \"RossDyedFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"BrotateThumb.jpg\";\n\t\t        \trossfull = \"BrotateFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossCowboyThumb.jpg\";\n\t\t        \trossfull = \"RossCowboyFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossLayoutThumb.jpg\";\n\t\t        \trossfull = \"RossLayoutFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossBurntThumb.jpg\";\n\t\t        \trossfull = \"RossBurntFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossATVThumb.jpg\";\n\t\t        \trossfull = \"RossATVFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossSleddingThumb.jpg\";\n\t\t        \trossfull = \"RossSleddingFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossColoredThumb.jpg\";\n\t\t        \trossfull = \"RossColoredFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossStrongRejectThumb.jpg\";\n\t\t        \trossfull = \"RossStrongRejectFull.jpg\";\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossCasualThumb.jpg\";\n\t\t        \trossfull = \"RossCasualFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossByBryceEvansThumb.jpg\";\n\t\t        \trossfull = \"RossByBryceEvansFull.jpg\"\n\t\t        } else if (value-- == 0) {\n\t\t        \tross = \"RossVestedThumb.jpg\";\n\t\t        \trossfull = \"RossVestedFull.jpg\"\n\t\t        } else {\n\t\t        \tross = \"RossTateThumb.jpg\";\n\t\t        \trossfull = \"RossTateFull.jpg\"\n\t\t        }\n\t\t        document.getElementById(\"ross\").src = \"images/\" + ross;\n\t\t        document.getElementById(\"rossfull\").href = \"images/\" + rossfull;\n\t\t      }\n\t\t    });\n\t\t    $( \"#amount\" ).val( $( \"#slider-vertical\" ).slider( \"value\" ) );\n\t\t  });\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<div id=\"personal\" style=\"margin-left:auto;margin-right:auto;border-bottom:2px solid black\">\n\t\t\t<table style=\"margin-left:auto;margin-right:auto\"><tbody><tr>\n\t\t\t\t<td style=\"vertical-align:middle\">\n\t\t\t\t\t<table style=\"margin-left:auto;margin-right:auto\">\n\t\t\t\t\t\t<tbody><tr><td align=\"center\"><img src=\"http://www.clker.com/cliparts/r/q/M/X/h/0/shoe-print-th.png\" height=\"30\" width=\"20\"></td></tr>\n\t\t\t\t\t\t<tr><td align=\"center\" style=\"padding-top:5;padding-bottom:5\"><div id=\"slider-vertical\" style=\"height: 200px;\" class=\"ui-slider ui-slider-vertical ui-widget ui-widget-content ui-corner-all\" aria-disabled=\"false\"><div class=\"ui-slider-range ui-widget-header ui-corner-all ui-slider-range-min\" style=\"height: 69.2308%;\"></div><a class=\"ui-slider-handle ui-state-default ui-corner-all\" href=\"#\" style=\"bottom: 69.2308%;\"></a></div></td></tr>\n\t\t\t\t\t\t<tr><td align=\"center\" style=\"padding-bottom:25\"><img src=\"http://subtalarsuperhero.files.wordpress.com/2012/02/foot3.png\" height=\"30\" width=\"20\"></td></tr>\n\t\t\t\t\t</tbody></table>\n\t\t\t\t</td>\n\t\t\t\t<td style=\"vertical-align:middle\" width=\"370\" align=\"center\">\n\t\t\t\t\t<a id=\"rossfull\" href=\"images/RossStrongRejectFull.jpg\"><img id=\"ross\" class=\"photo\" src=\"images/RossStrongRejectThumb.jpg\" alt=\"Ross Tate\" style=\"float:none;vertical-align:middle\" height=\"300\"></a>\n\t\t\t\t</td>\n\t\t\t\t<td style=\"vertical-align:middle\">\n\t\t\t\t\t<h1 class=\"name\">Ross Tate <font size=\"1\"><a href=\"CV.pdf\">[CV]</a></font></h1>\n\t\t\t\t\t<p>Assistant Professor in <a href=\"http://www.cs.cornell.edu/\">Computer Science</a> at <a href=\"http://www.cornell.edu/\">Cornell University</a><br>\n\t\t\t\t\t\tDirector of <a href=\"http://soil-initiative.org/\">The Single Open Intermediate Language Initiative</a><br>\n\t\t\t\t\t\tComputer Science Ph.D. at University of California, San Diego <font size=\"1\"><a href=\"theses/tate-thesis.pdf\">[Thesis]</a></font><br>\n\t\t\t\t\t\tMathematics &amp; Computer Science B.S.s at Cal Poly, San Luis Obispo</p>\n\t\t\t\t\t<p>434 Gates Hall<br>\n\t\t\t\t\t\tCornell University<br>\n\t\t\t\t\t\tIthaca, NY 14853-7501<br>\n\t\t\t\t\t\tross somewhere around cs.cornell.edu</p>\n\n\t\t\t\t\t<p>Graduate Advisor: <a href=\"http://cseweb.ucsd.edu/~lerner/\">Sorin Lerner</a><br>\n\t\t\t\t\t\tUndergraduate Advisor: <a href=\"http://www.csc.calpoly.edu/~akeen/\">Aaron Keen</a></p>\n\t\t\t\t</td>\n\t\t\t</tr></tbody></table>\n\t\t</div>\n\n\t\t<div id=\"main\">\n\t\t\t<div style=\"float:right;padding-left:2em;padding-right:2em;padding-bottom:1em;border-left-width:2px;border-left-style:solid;border-left-color:black;margin-left:2em;text-align:center\">\n\t\t\t\t <h2 style=\"padding-top:0em\">Talks</h2>\n\t\t\t\t <p><a href=\"publications/empower/\"><img src=\"Tate-OOPSLA18.png\" style=\"border:2px solid black\" alt=\"Empowering Union and Intersection Types with Integrated Subtyping\"><br><b>OOPSLA 2018</b></a></p>\n\t\t\t\t <p><a href=\"publications/sleffects/\"><img src=\"Tate-ICFP18.png\" style=\"border:2px solid black\" alt=\"Strict and Lazy Semantics for Effects: Layering Monads and Comonads\"><br><b>ICFP 2018</b></a></p>\n\t\t\t\t <p><a href=\"publications/nomalive/\"><img src=\"Tate-OOPSLA17.png\" style=\"border:2px solid black\" alt=\"Sound Gradual Typing is Nominally Alive and Well\"><br><b>OOPSLA 2017</b></a></p>\n\t\t\t\t <p id=\"ECOOP17\"><img src=\"TATE-ECOOP17.png\" style=\"border:2px solid black\" alt=\"Retargeting Gradual Typing\" onclick=\"document.getElementById('ECOOP17').innerHTML='<iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fARowS_O9t4?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen></iframe>'\"><br><a href=\"https://www.youtube.com/watch?v=fARowS_O9t4\"><b>Dahl-Nygaard Keynote</b><br><b>@ ECOOP 2017</b></a></p>\n\t\t\t\t <p id=\"SPLASH16\"><img src=\"Tate-SPLASH16.jpg\" style=\"border:2px solid black\" alt=\"SPLASH 2016: Nada Amin and Ross Tate on breaking Java and Scala's type system\" onclick=\"document.getElementById('SPLASH16').innerHTML='<iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/H_2y9wyOQN0?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen></iframe>'\"><br><b>Interview @ SPLASH 2016</b></p>\n\t\t\t\t <p id=\"CurryOn16\"><img src=\"Tate-CurryOn16.png\" style=\"border:2px solid black\" alt=\"Redesigning Type Systems for Industry OO\" onclick=\"document.getElementById('CurryOn16').innerHTML='<iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V9S8lU58K68?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen></iframe>'\"><br><b>Curry On! 2016</b></p>\n\t\t\t\t <p><a href=\"publications/chpeffects/\"><img src=\"Tate-PLDI15.png\" style=\"border:2px solid black\" alt=\"Preventing Glitches and Short Circuits in High-Level Self-Timed Chip Specifications\"><br><b>PLDI 2015</b></a></p>\n\t\t\t\t <p><a href=\"publications/shapes/\"><img src=\"Tate-PLDI14.png\" style=\"border:2px solid black\" alt=\"Getting F-Bounded Polymorphism into Shape\"><br><b>PLDI 2014</b></a></p>\n\t\t\t\t <p><a href=\"publications/productors/\"><img src=\"Tate-POPL13.png\" style=\"border:2px solid black\" alt=\"The Sequential Semantics of Producer Effect Systems\"><br><b>POPL 2013</b></a></p>\n\t\t\t\t <p><a href=\"publications/tamewild/\"><img src=\"Tate-PLDI11.jpg\" style=\"border:2px solid black\" alt=\"Taming Wildcards in Java\\'s Type System\"><br><b>PLDI 2011</b></a></p>\n\t\t\t\t <p><a href=\"publications/italx/\"><img src=\"Tate-PLDI10.jpg\" style=\"border:2px solid black\" alt=\"Inferable Object-Oriented Typed Assembly Language\"><br><b>PLDI 2010</b></a></p>\n\t\t\t\t <p><a href=\"publications/proofgen/\"><img src=\"Tate-POPL10.jpg\" style=\"border:2px solid black\" alt=\"Generating Compiler Optimizations from Proofs\"><br><b>POPL 2010</b></a></p>\n\t\t\t\t <p><a href=\"publications/eqsat/\"><img src=\"Tate-POPL09.png\" style=\"border:2px solid black\" alt=\"Equality Saturation: A New Approach to Optimization\"><br><b>POPL 2009</b></a></p>\n\t\t\t</div>\n\n\t\t\t<h2>Publications</h2>\n\t\t\t\t<p>The links below contain more than the usual pdf files; they contain an embedded video of the presentation and the powerpoint slides, for those people who would like a quick overview before reading the paper. They also have answers to common questions we have recieved.</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"http://www.cs.cornell.edu/~akhirsch/pubs/first_order_logic_for_flow_limited_authorization.html\"><b>First-Order Logic for Flow-Limited Authorization</b></a> (FCS 2019)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~akhirsch/\">Andrew K. Hirsch</a>, <a href=\"http://www.cs.cornell.edu/~pamorim/\">Pedro H. Azevedo de Amorim</a>, <a href=\"https://www.cs.cornell.edu/~ethan/\">Ethan Cecchetti</a> and <a href=\"https://users.soe.ucsc.edu/~owen/\">Owen Arden</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/effectful/\"><b>The Effects of Effects on Constructivism</b></a> (MFPS 2019)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"https://www.cs.cornell.edu/~lironcohen/\">Liron Cohen</a> and <a href=\"http://afsofia.dev/\">Sofia Abreu Faro</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/empower/\"><b>Empowering Union and Intersection Types with Integrated Subtyping</b></a> (OOPSLA 2018)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~fabianm/\">Fabian Muehlboeck</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/sleffects/\"><b>Strict and Lazy Semantics for Effects: Layering Monads and Comonads</b></a> (ICFP 2018)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~akhirsch/\">Andrew K. Hirsch</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/nomalive/\"><b>Sound Gradual Typing is Nominally Alive and Well</b></a> (OOPSLA 2017) (Distinguished Paper Award)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~fabianm/\">Fabian Muehlboeck</a><br></li>\n\t\t\t\t\t<li><a href=\"http://io.livecode.ch/learn/namin/unsound\"><b>Java and Scala's Type Systems are Unsound</b></a> (OOPSLA 2016) (Distinguished Artifact Award)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://namin.net/\">Nada Amin</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/chpeffects/\"><b>Preventing Glitches and Short Circuits in High-Level Self-Timed Chip Specifications</b></a> (PLDI 2015)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.stephenlongfield.com/\">Stephen Longfield</a>, <a href=\"http://www.cs.cornell.edu/~nkounkou/\">Brittany Nkounkou</a>, and <a href=\"http://vlsi.cornell.edu/~rajit/\">Rajit Manohar</a><br></li>\n\t\t\t\t\t<li><a href=\"publications/shapes/\"><b>Getting F-Bounded Polymorphism into Shape</b></a> (PLDI 2014)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~blg59/\">Ben Greenman</a> and <a href=\"http://www.cs.cornell.edu/~fabianm/\">Fabian Muehlboeck</a><br>\n\t\t\t\t\t\t&nbsp;&nbsp; and consultation from the <a href=\"http://ceylon-lang.org/\">Ceylon</a> team at <a href=\"http://www.redhat.com/\">Red Hat</a></li>\n\t\t\t\t\t<li><a href=\"publications/mixedsite/\"><b>Mixed-Site Variance</b></a> (FOOL 2013)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with consultation from the <a href=\"http://kotlin.jetbrains.org/\">Kotlin</a> team at <a href=\"http:/www.jetbrains.org/\">JetBrains</a></li>\n\t\t\t\t\t<li><a href=\"publications/productors/\"><b>The Sequential Semantics of Producer Effect Systems</b></a><a> (POPL 2013)</a></li><a>\n\t\t\t\t\t</a><li><a></a><a href=\"publications/tamewild/\"><b>Taming Wildcards in Java's Type System</b></a> (PLDI 2011)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://cseweb.ucsd.edu/~atl017/\">Alan Leung</a> and <a href=\"http://cseweb.ucsd.edu/~lerner/\">Sorin Lerner</a></li>\n\t\t\t\t\t<li><a href=\"publications/italx/\"><b>Inferable Object-Oriented Type Assembly Language</b></a> (PLDI 2010)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://research.microsoft.com/~juanchen/\">Juan Chen</a> and <a href=\"http://research.microsoft.com/~chrishaw/\">Chris Hawblitzel</a></li>\n\t\t\t\t\t<li><a href=\"publications/proofgen/\"><b>Generating Compiler Optimizations from Proofs</b></a> (POPL 2010)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://cseweb.ucsd.edu/~mstepp/\">Michael Stepp</a> and <a href=\"http://cseweb.ucsd.edu/~lerner/\">Sorin Lerner</a></li>\n\t\t\t\t\t<li><a href=\"publications/eqsat/\"><b>Equality Saturation: A New Approach to Optimization</b></a> (POPL 2009, LMCS 2011, CAV 2011)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://cseweb.ucsd.edu/~mstepp/\">Michael Stepp</a>, <a href=\"http://cseweb.ucsd.edu/~ztatlock/\">Zachary Tatlock</a>, and <a href=\"http://cseweb.ucsd.edu/~lerner/\">Sorin Lerner</a></li>\n\t\t\t\t</ul>\n\n\t\t\t<h2>Articles</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"https://hackernoon.com/java-is-unsound-28c84cb2b3f\"><b>Java is Unsound: The Industry Perspective</b></a> (2017)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; featured by <a href=\"https://hackernoon.com/java-is-unsound-28c84cb2b3f\">HackerNoon</a> and <a href=\"https://dev.to/rosstate/java-is-unsound-the-industry-perspective\">dev.to</a>\n\t\t\t\t</li></ul>\n\n\t\t\t<h2>Ceylon\n\t\t\t\t<div id=\"media\" style=\"width:458px\">\n\t\t\t\t\t<div id=\"presentation\" style=\"border-width:thin;border-color:#000000;border-style:solid\">\n\t\t\t\t\t  <video poster=\"CeylonTypes.jpg\" width=\"456px\" height=\"342px\" alt=\"Designing the Ceylon Type System\" preload=\"none\" controls=\"\">\n\t\t\t\t\t\t<source src=\"CeylonTypes.mp4\" type=\"video/mp4\">\n\t\t\t\t\t\tYour browser does not support the video tag. You can use <a href=\"CeylonTypes.mp4\">this link</a> to view the presentation (it takes a few seconds to buffer).\n\t\t\t\t\t  </video>\n\t\t\t\t\t</div>\n\t\t\t\t</div></h2>\n\t\t\t\t<p>Due to my work on wildcards, I came into contact with the <a href=\"http://ceylon-lang.org/\">Ceylon</a> team at <a href=\"http://www.redhat.com/\">Red Hat</a>. They are developing a next-generation object-oriented industry-scale programming language, attempting to incorporate all the experience offered by languages such as Java, C#, Scala, Smalltalk, and Python over the last decade or so. My role on the team is primarily as <a href=\"http://ceylon-lang.org/community/team\">type-system advisor</a>, making sure Ceylon's powerful features all work together cohesively. I will also be formalizing the language once we pin it down. Meanwhile I will be acting as a sort of research liaison, looking for opportunities to transfer technologies from the research communty to Ceylon, so feel free to contact me if you have some fun research ideas for Ceylon.</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"publications/shapes/\"><b>Getting F-Bounded Polymorphism into Shape</b></a> (PLDI 2014)<br>\n\t\t\t\t\t\t&nbsp;&nbsp; with <a href=\"http://www.cs.cornell.edu/~blg59/\">Ben Greenman</a> and <a href=\"http://www.cs.cornell.edu/~fabianm/\">Fabian Muehlboeck</a></li>\n\t\t\t\t\t<li>Lukas Eder: <a href=\"https://blog.jooq.org/2013/12/03/top-10-ceylon-language-features-i-wish-we-had-in-java/\">Top 10 Ceylon Language Features I Wish We Had in Java</a></li>\n\t\t\t\t</ul>\n\n\t\t\t<h2>Kotlin</h2>\n\t\t\t\t<p>Due to my work on wildcards and Ceylon, I came into contact with the <a href=\"http://kotlin.jetbrains.org/\">Kotlin</a> team at <a href=\"http://www.jetbrains.org/\">JetBrains</a>. They, too, are developing a next-generation object-oriented industry-scale programming language, and am acting primarily as a type-system advisor there as well. The two projects are very different, both in how they operate, and in what they are working towards. The contrast has been very educational, offering a diverse set of opinions on potential features or refinements, and resulting in subtle but important differences in the problems at hand. Most recently I have written a paper on a system I developed for Kotlin, which has a strong need to mix use-site and declaration-site variance together for purposes of compatibility and usability.</p>\n\t\t\t\t<ul><li><a href=\"publications/mixedsite/\"><b>Mixed-Site Variance</b></a> (FOOL 2013)</li></ul>\n\n\t\t\t<h2>Awards</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Distinguished Paper Award for <a href=\"publications/nomalive/\">Sound Gradual Typing is Nominally Alive and Well</a> at OOPSLA 2017</li>\n\t\t\t\t\t<li><a href=\"http://www.aito.org/Dahl-Nygaard/\">Junior Dahl-Nygaard Prize 2017</a> <p>\"Ross Tate has made fundamental contributions to type systems with applications to OO languages. This includes the discovery that although wildcards as in Java are undecidable in theory, programmers only use specific flavors of wildcards which keeps them decidable in practice (PLDI'11); similarly, he proposed that F-bounded polymorphism can be replaced by simpler concepts, which were sufficient for the use that programmers made of generics in a large corpus (PLDI'14). Finally, he discovered that Java wildcards and Scala path-dependent types, in combination with implicit null pointers, make the languages unsound (OOPSLA'16). In addition, he has had strong industrial impact via his involvement in the production languages Ceylon (Red Hat) and Kotlin (JetBrains).\"</p></li>\n\t\t\t\t\t<li>Distinguished Artifact Award for <a href=\"http://io.livecode.ch/learn/namin/unsound\">Java and Scala's Type Systems are Unsound</a> at OOPSLA 2016</li>\n\t\t\t\t\t<li><a href=\"http://research.microsoft.com/en-us/collaboration/awards/fellowships.aspx\">Microsoft Research Fellowship</a> 2009</li>\n\t\t\t\t</ul>\n\n\t\t\t<h2>Students</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"http://www.cs.cornell.edu/~nkounkou/\">Brittany Nkounkou</a></li>\n\t\t\t\t</ul>\n\t\t\t\t<hr>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"http://afsofia.dev/\">Sofia Abreu Faro</a><!--a href=\"http://cornell.academia.edu/fmota\">Fran Mota</a--></li>\n\t\t\t\t\t<li><a href=\"http://www.cs.cornell.edu/~akhirsch/\">Andrew Hirsch</a> (<a href=\"theses/hirsch-thesis.pdf\">Thesis</a>)</li>\n\t\t\t\t\t<li><a href=\"http://www.cs.cornell.edu/~fabianm/\">Fabian Muehlboeck</a> (<a href=\"theses/muehlboeck-thesis.pdf\">Thesis</a>)</li>\n\t\t\t\t</ul>\n\n\t\t\t<h2>Classes</h2>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2019Fa/\">CS-5152: Open-Source Software Engineering</a> (Fall 2019)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2019Sp/\">CS-5152: Open-Source Software Engineering</a> (Spring 2019)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs6117/2018Sp/\">CS-6117: Category Theory for Computer Scientists</a> (Spring 2018)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2017Sp/\">CS-5152: Open-Source Software Engineering</a> (Spring 2017)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs2110/2016Sp/\">CS-2110: OO Programming and Data Structures</a> (Spring 2016)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2015Sp/\">CS-5152: Open-Source Software Engineering</a> (Spring 2015)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs6117/2014Fa/\">CS-6117: Category Theory for Computer Scientists</a> (Fall 2015)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2014Sp/\">CS-5152: Open-Source Software Engineering</a> (Spring 2014)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs4120/2013Fa/\">CS-4120/4121/5120/5121: Introduction to Compilers</a> (Fall 2014)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs5152/2013Sp/\">CS-5152: Open-Source Software Engineering</a> (Spring 2013)</p>\n\t\t\t\t<p><a href=\"http://www.cs.cornell.edu/courses/cs6118/2012Fa/\">CS-6118: Types and Semantics</a> (Fall 2013)</p>\n\t\t\t\t<p><a href=\"http://csemoodle.ucsd.edu/\">CSE-130: Programming Languages</a> (Summer Session II 2010)</p>\n\n<!--\t\t\t<h2>Active Projects</h2>\n\t\t\t<p>Below are the projects I am currently working on. There are many others I hope to work on once I have the time. I think my plate's pretty full at the moment.</p>\n\t\t\t<ul>\n\t\t\t<li><b>Equality-Based Applications:</b> I am working with <a href=\"http://cseweb.ucsd.edu/~lerner/\">Sorin Lerner</a>, <a href=\"http://cseweb.ucsd.edu/~mstepp/\">Michael Stepp</a> and <a href=\"http://cseweb.ucsd.edu/~ztatlock\">Zachary Tatlock</a> on continuing our research with <a href=\"publications/eqsat/\">Equality Saturation</a>. We have found many avenues to explore, some our own and some suggested by other researchers in the community. Most recently we applied our <a href=\"publications/proofgen/\">proof generalization</a> techniques to equality saturation in order to <a href=\"publications/proofgen/\">learn optimizations</a> from concrete code transformations which can even be supplied by the programmer.</li>\n\t\t\t<li><b>Applications of Proof Generalization:</b> In the above optimization learning project, proofs play a key role in our algorithm. In fact, we developed an abstract algorithm for <a href=\"publications/proofgen/\">generalizing proofs</a>. When applied to proofs of program equivalence, these generalizations produce program optimizations. However, our abstract algorithm is expressed categorically, so it can be applied to many domains besides our own. We have already found applications to database query optimization, type debugging in Hindley-Milner-based languages, and type generalization. I plan to investigate how this technique can be used to automatically \"generify\" Java or C# code.</li>\n\t\t\t<li><b>Integrating Effects into Language Design:</b> I am working with <a href=\"http://research.microsoft.com/~daan/\">Daan Leijen</a> on incorporating monadic effects into the design of functional languages. This has been an interesting exploration into the design and implementation philosophies of the various functional languages already out there. Some of these philosophies, such as type inference, we are keeping and even embellishing upon, while other philosophies, such as currying, we are discarding because they interact poorly with effects. In the future, I hope to do the same investigation into imperative languages and examine which design philosophies mix well with effectful programming.</li>\n\t\t\t<li><b>Existential Types:</b> In our type inference project for typed assembly languages, existential types play a critical role. Existential types can be quite challenging to work with when the standard pack and open operations are made implicit, and joining these types is a fundamental component of our type inference. Interestingly, I found a very general solution using category theory of all things. This general solution dramatically simplified designing our type system since we could know which changes would or would not break joins. Changes like adding generics turn out to be not a problem, while changes like null pointers have to be done carefully otherwise joins do not exist. I am also looking into other applications of existential types made possible by this framework. One such application was my research into Java's wildcards, for which this framework provided the subtyping algorithm.</li>\n\t\t\t</ul>-->\n\n<!--\t\t\t<h2>Research Interests</h2>\n\t\t\t<p>I am a fan of programming languages, or really programming language design. After my work in compiler optimizations, I have realized a strong need for making the intended and expected meaning of a program more explicit in the language, both for the programmer's sake and the compiler's sake. I am looking into how to design languages so that this information is available to both the programmer and compiler without being a burden to either. More casually, I also enjoy bits of linguisitcs and hope to incorporate it into language design. Having been a math major in my dark past, I have taken a fondness to category theory, which has already heavily influenced my research and will likely influence future language designs of mine. Ironically, my most recent application of category theory was to assembly code. I love how something so abstract can greatly contribute to something so concrete.</p> -->\n\n\t\t\t<h2>Research Internships</h2>\n\t\t\t\t<p>I interned under <a href=\"http://research.microsoft.com/~daan/\">Daan Leijen</a> at Microsoft Research in Redmond in Summer/Fall 2009. We designed a pure but effectful functional programming language, as well as a Hindley-Milner-like type inference algorithm with effects and higher-order polymorphism (based on Daan's <a href=\"http://research.microsoft.com/~daan/pubs.aspx\">HMF</a>). In doing so, I improved compiler technology for inferring higher-ranked polymorphism. I also managed to generalize monads in order to formalize effect systems with multiple interacting effects.</p>\n\t\t\t\t<img class=\"photobottom\" src=\"capoeira.jpg\" alt=\"Ross Tate Capoeira\">\n\t\t\t\t<p>I interned under <a href=\"http://research.microsoft.com/~juanchen/\">Juan Chen</a> and <a href=\"http://research.microsoft.com/~chrishaw/\">Chris Hawblitzel</a> at Microsoft Research in Redmond in Summer/Fall 2008. I designed a type-inference algorithm for an x86 assembly type system for object-oriented programs, as can be seen at <a href=\"publications/italx/\">PLDI 2010</a>. This typed assembly language, which we called iTalX, is now a key part of Microsoft Research's computer-verified memory-safe operating system, <a href=\"http://research.microsoft.com/apps/pubs/?id=122884\">Verve</a>. In order to design this inferable type system, I first designed a framework for existential types based on category theory, which has proven to be intuitive, powerful, and flexible. This framework was then reused for my work on Java's wildcards in <a href=\"publications/tamewild/\">PLDI 2011</a>.</p>\n\n\t\t\t<h2>Industry Internships</h2>\n\t\t\t\t<p>I have interned at <a href=\"http://www.treyarch.com/\">Treyarch</a>, a studio of Activision, twice now. The first time I worked on the early stages of the Spider-Man 3 console game. The second time I worked on Spider-Man: Web of Shadows. My biggest contributions were in improving the scripting language used by the game designers, and this may have somewhat fostered my enjoyment of programming languages. I also worked a lot with computational geometry and corresponding graph theory.</p>\n\t\t\t\t<p>Before that, I interned at <a href=\"http://www.customflix.com/\">CustomFlix</a>. At the time, CustomFlix was a very small internet company which processed, distributed, and marketed personal videos. I held various roles such as architect, tester, lead, and web developer.</p>\n\n\t\t\t<h2>Post Script</h2>\n\t\t\t\t<p>I stole this page from <a href=\"http://goto.ucsd.edu/~pmr/\">Patrick \"Maxim\" Rondon</a>.</p>\n\t\t\t\t<p>I found my <a href=\"http://albertalandsurveyhistory.ca/index.php?title=R.A.F._(Ross)_Tate\">grandpa</a> online. Thought it was pretty cool.</p>\n\t\t</div>\n\t\n\n</body></html>"