{"email": [], "image": ["/images/me.png"], "research_blurb": ["<strong>OS Stack for Serverless Architectures:</strong> Cloud ser\u00advices are quickly mov\u00ading \nfrom tra\u00addi\u00adtional server-based ar\u00adchi\u00adtec\u00adture to a server\u00adless model. Such \nserver\u00adless ar\u00adchi\u00adtec\u00adtures en\u00adable higher scalab\u00adil\u00adity and re\u00adsource util\u00adiz\u00ada\u00adtion by\nal\u00adlow\u00ading ap\u00adplic\u00ada\u00adtions to launch short-lived com\u00adpute tasks that op\u00ader\u00adate on data\nstored on a re\u00admote store. However, today\u2019s server\u00adless stacks cater mainly to\n<em>stateless</em> (i.e., em\u00adbarass\u00adingly par\u00adal\u00adlel) tasks, there is a tre\u00admend\u00adous push\nto\u00adwards sup\u00adport\u00ading state\u00adful ap\u00adplic\u00ada\u00adtions on server\u00adless ar\u00adchi\u00adtec\u00adtures. To this\nend, we are ex\u00adplor\u00ading the ground up design of the server\u00adless OS stack that\nfa\u00adcil\u00adit\u00adates state\u00adless and state\u00adful ap\u00adplic\u00ada\u00adtions.\n<em>Publications:</em>\n<ul>\nA Berkeley View on Serverless Computing [<a href=\"https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf\" target=\"_blank\" title=\"Link opens in new window\">UC Berkeley Tech Report</a>]\n</ul>\n<strong>System stack for emerging hardware:</strong> Today\u2019s sys\u00adtem stacks were de\u00adsigned to\nop\u00ader\u00adate with tra\u00addi\u00adtional hard\u00adware, e.g., with 1 Gbps links and tra\u00addi\u00adtional \nstor\u00adage me\u00addia. The next gen\u00ader\u00ada\u00adtion of emer\u00adging hard\u00adware (e.g., 100G\u00adbps links,\nnon-volat\u00adile memory) change the many fun\u00adda\u00admental as\u00adsump\u00adtions made in the design\nand op\u00adtim\u00adiz\u00ada\u00adtion of these sys\u00adtems. To re\u00adsolve these chal\u00adlenges, we are \nre\u00advis\u00adit\u00ading tra\u00addi\u00adtional sys\u00adtem designs to bridge the gap between hard\u00adware\ncap\u00adab\u00adil\u00adit\u00adies and real\u00adiz\u00adable sys\u00adtem prop\u00ader\u00adties.\n<em>Publications:</em>\n<ul>\nDistributed Monitoring &amp; Diagnosis Stack for High Speed Networks [<a href=\"http://cs.berkeley.edu/~anuragk/papers/confluo.pdf\" target=\"_blank\" title=\"Link opens in new window\">NSDI\u201919 Paper</a>], [<a href=\"https://github.com/ucbrise/confluo\" target=\"_blank\" title=\"Link opens in new window\">Code</a>]\n</ul>\n<strong>Secure cloud systems:</strong> With web ap\u00adplic\u00ada\u00adtions and ser\u00advices mov\u00ading from \nself-owned serv\u00aders in private data cen\u00adters to to pub\u00adlic cloud plat\u00adforms, users\nmust now trust the cloud pro\u00advider who man\u00adages the phys\u00adical in\u00adfra\u00adstruc\u00adture that \ntheir ap\u00adplic\u00ada\u00adtions run on. Un\u00adfor\u00adtu\u00adnately, high-pro\u00adfile se\u00adcur\u00adity breaches in the \npub\u00adlic cloud in\u00addic\u00adate that this trust may not al\u00adways be well placed. We are \nex\u00adplor\u00ading the vul\u00adner\u00adab\u00adil\u00adit\u00adies of ex\u00adist\u00ading sys\u00adtem de\u00adploy\u00adments hos\u00adted on the \ncloud and the design of se\u00adcure sys\u00adtems that no longer have to trust the cloud \npro\u00advider.\n<strong>Queries on compressed data:</strong> En\u00adsur\u00ading low latency and high through\u00adput for \nuser-fa\u00adcing quer\u00adies is chal\u00adlen\u00adging when the volume of data be\u00ading quer\u00adied grows \nlar\u00adger than the DRAM ca\u00adpa\u00adcity. Tra\u00addi\u00adtion\u00adally, stor\u00adage sys\u00adtems have re\u00adsor\u00adted to \nspill\u00ading over such data to sig\u00adni\u00adfic\u00adantly slower sec\u00adond\u00adary stor\u00adage, res\u00adult\u00ading in \nhigher query latency and re\u00adduced through\u00adput. We have been ex\u00adplor\u00ading a \nfun\u00adda\u00adment\u00adally new ap\u00adproach to re\u00adsolve this chal\u00adlenge \u2014 en\u00adabling quer\u00adies \n<em>directly</em> on a com\u00adpressed rep\u00adres\u00adent\u00ada\u00adtion of the data.\n<em>Publications:</em>\n<ul>\nSuccinct: Enabling Queries on compressed data [<a href=\"http://cs.berkeley.edu/~anuragk/papers/succinct.pdf\" target=\"_blank\" title=\"Link opens in new window\">NSDI\u201915 Paper</a>], [<a href=\"http://github.com/amplab/succinct-cpp\" target=\"_blank\" title=\"Link opens in new window\">Code: Standalone System</a>], [<a href=\"https://github.com/amplab/succinct\" target=\"_blank\" title=\"Link opens in new window\">Code: Succinct on Spark</a>]\nBlowFish: Dynamic Storage-Performance Tradeoff in Data Stores [<a href=\"http://cs.berkeley.edu/~anuragk/papers/blowfish.pdf\" target=\"_blank\" title=\"Link opens in new window\">NSDI\u201916 Paper</a>]\nSprint: Regular Expression Queries on Compressed Data [<a href=\"http://cs.berkeley.edu/~anuragk/papers/swift.pdf\" target=\"_blank\" title=\"Link opens in new window\">Tech Report</a>], [<a href=\"https://github.com/amplab/sprint\" target=\"_blank\" title=\"Link opens in new window\">Code</a>]\nZipG: Serving Queries on Compressed Graphs [<a href=\"http://cs.berkeley.edu/~anuragk/papers/zipg.pdf\" target=\"_blank\" title=\"Link opens in new window\">SIGMOD\u201917 Paper</a>]\n</ul>"]}