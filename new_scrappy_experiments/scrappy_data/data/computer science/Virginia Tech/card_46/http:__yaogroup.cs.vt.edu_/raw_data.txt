{"email": ["widm.1211@10.1002"], "image": ["https://cs.vt.edu/People/images/Small-Daphne-Yao-2-2019.jpg", "https://cs.vt.edu/People/images/Cc88pxQ2.jpeg", "https://cs.vt.edu/People/images/data-breach-101.jpg", "https://cs.vt.edu/People/images/BigG1.jpg", "https://cs.vt.edu/People/images/IEEE-SecDev-2018-Opening-Remarks.jpeg", "https://cs.vt.edu/People/images/CCS_anomaly.jpg", "https://cs.vt.edu/People/images/Yao-book-cover.jpg", "http://wordpress.cs.vt.edu/test1/wp-content/themes/aakashg/images/demo/header-image-1280x400.jpg", "https://cs.vt.edu/People/images/Patent-network-causality.jpg", "https://cs.vt.edu/People/images/inter-app-ICC.jpg"], "research_blurb": ["Human-centric Research Lab led by Dr. Danfeng (Daphne) Yao prides itself in building tools, software, and systems for deployable security and quantitative security assurance\n    measurement. Current projects  range from secure coding, anomaly detection in networked systems and programs, malware program analysis to cyber-physical system security, and data loss prevention.<!-- .left-section -->\n<!--\n    <div class=\"right-section\"><a href=\"http://wordpress.org/support/view/theme-reviews/catch-kathmandu\" target=\"_blank\">See More</a>-->\n<!-- .right-section --><!-- #homepage-message -->\n\n<section class=\"layout-three\" id=\"featured-post\">\n<h1 class=\"entry-title\" id=\"feature-heading\">Current Research</h1>\n<div class=\"featued-content-wrap\">\n<article class=\"post hentry post-demo\" id=\"featured-post-1\">\n<figure class=\"featured-homepage-image\">\n<a href=\"#\" title=\"STORYTELLING SECURITY\">\n<img alt=\"SECURING CRYPTO IMPLEMENTATIONS\" class=\"wp-post-image\" src=\"images/Cc88pxQ2.jpeg\" style=\"height: 300px\" title=\"SECURING CRYPTO IMPLEMENTATIONS\"/>\n</a>\n</figure>\n<div class=\"entry-container\">\n<header class=\"entry-header\">\n<h1 class=\"entry-title\">\n<a href=\"#\" title=\"SECURING CRYPTO IMPLEMENTATIONS\">SECURING CRYPTO IMPLEMENTATIONS</a>\n</h1>\n</header>\n<div class=\"entry-content\" style=\"font-size: small\">\n\n                            Software vulnerabilities are costly. NIST estimates that cost to be $60 billion each year, which includes the costs for developing and distributing software patches and reinstalling infected systems and the lost productivity due to malware and errors.\n                        \n\n                            The problem of software vulnerabilities is not new. What is new and promising is the increasing adoption of cryptography and security mechanisms in common software applications. However, it is difficult to write crypto code correctly.\n                        \n\n                            Surprisingly, the practical task of securing cryptographic implementation is still in its infancy. This status is in sharp contrast with the multi-decade advancement of modern cryptography.\n                        \n\n                            This gap became particularly alarming, after multiple high-profile discoveries of cryptography-related vulnerable code in widely used network libraries and tools (e.g., the lack of authenticated encryption in iMessage, Diffie-Hellman key exchange downgrade vulnerability in TLS, and the exposure of random seeds in Juniper Network).\n                        \n\n                            Our ongoing effort is on cryptographic program analysis (CPA), where we design rigorous static program analysis to detect crypto vulnerabilities in code C programs (IEEE SecDev 2017) and Java programs.\n                        \n\n<a href=\"https://arxiv.org/pdf/1901.01327.pdf\">Our ICSE '18</a>  work on empirical findings from the Stack Overflow forum are interesting. They motivate the need for effective crypto coding assistance.\n                            <a href=\"papers/CryptoGuardCameraReady.pdf\"> Our CCS '19 work <em>CryptoGurd</em> </a> exposes cryptographic API misuses, such as exposed secrets, predictable\n                            random numbers, and vulnerable certificate verification. Running our tool on massive sized (e.g., millions of LoC) on 46 high-impact large-scale Apache projects and 6,181\n                            Android apps generated many security insights. Our findings helped\n                            multiple popular Apache projects to harden their code, including\n                            Spark, Ranger, and Ofbiz. At the same time our refinements in <em>CryptoGurd</em> reduce false alerts by 76% to 80% in our experiments.\n                        \n\n<!-- .entry-container -->\n</article>\n<article class=\"post hentry post-demo\" id=\"featured-post-2\">\n<figure class=\"featured-homepage-image\">\n<a href=\"#\" title=\"DATA BREACHES AND CERTIFICATION SECURITY\">\n<img alt=\"DATA BREACHES AND CERTIFICATION SECURITY\" class=\"wp-post-image\" src=\"images/data-breach-101.jpg\" style=\"height: 300px\" title=\"DATA BREACHES AND CERTIFICATION SECURITY\"/>\n</a>\n</figure>\n<div class=\"entry-container\">\n<header class=\"entry-header\">\n<h1 class=\"entry-title\">\n<a href=\"#\" title=\"DATA BREACHES AND CERTIFICATION SECURITY\">DATA BREACHES AND CERTIFICATION SECURITY</a>\n</h1>\n</header>\n<div class=\"entry-content\" style=\"font-size: small\">\n<!--\n                        \n                            Context is a key for security analysts to reason about the legitimacy of observed system and network events.\n                        \n                        \n                            Finding out why things occur and why they occur in a specific order are like telling stories about the computers and users.\n                        \n                        \n                            We coined the phrase storytelling security to refer to a general causal reasoning approach for security.\n                        \n                        \n                            Our group has successfully demonstrated several concrete embodiments for network security (C&S 2016, ASIACCS 2014), web security (TDSC 2012, NSS 2011), and Android security (C&S 2016, AISec 2016).\n                        \n                        \n                            We hold two U.S. patents on the causality for security technologies.\n                        \n                        -->\n\n                            The massive payment card industry (PCI) involves various entities such as merchants, issuer banks, acquirer banks, and card brands.\n                            Ensuring security for all entities that process payment card information is a challenging task. The PCI Security Standards Council requires all entities to be compliant with the PCI Data Security\n                            Standard (DSS), which specifies a series of security requirements. However, little is known regarding how well PCI DSS is enforced in  practice.\n                        \n\n                            We have  highlighted data-leaks due to human mistakes <a href=\"https://ieeexplore.ieee.org/document/7038200\"> (TIFS '19)</a>, data breaches in enterprise <a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/widm.1211@10.1002/(ISSN)1097-0312.India-Mathematics-Day\">(WIREs Data Mining Knowl Discov '17)</a>,\n                            and reported the Target Corporation data breach <a href=\"https://arxiv.org/pdf/1701.04940.pdf\"> (CoRR '17)</a> the second most devastating data breach in history.\n                        \n\n                            Our  <a href=\"papers/PCI-DSS-Security-ACM-CCS-2019.pdf\">CCS '19 work <em>BuggyCart</em></a> identified  an alarming gap between the security standard and its real-world enforcement.\n                            Using 35 PCI DSS related vulnerabilities BuggyCart can examine the capability  and limitations of PCI scanners and the rigor of the certification.\n                            process.\n                        \n\n                            Our new lightweight scanning tool named PciCheckerLite reveal that\n                            none of the 6 PCI scanners we tested are fully compliant with the PCI\n                            scanning guidelines, issuing certificates to merchants that still have major vulnerabilities.\n                            By scanning 1,203 e-commerce websites across various business sectors, we can confirm that 86% of the websites have\n                            at least one PCI DSS violation that should have disqualified them\n                            as non-compliant. Our in-depth accuracy analysis also shows that\n                            PciCheckerLite\u2019s output is more precise than w3af. We are reacheding\n                            out to the PCI Security Council to share our research results to\n                            improve the enforcement in practice.\n                        \n\n<!-- .entry-container -->\n</article>\n<article class=\"post hentry post-demo\" id=\"featured-post-3\">\n<figure class=\"featured-homepage-image\">\n<a href=\"#\" title=\"PROGRAM AND SYSTEM ANOMALY DETECTION\">\n<img alt=\"PROGRAM AND SYSTEM ANOMALY DETECTION\" class=\"wp-post-image\" src=\"images/CCS_anomaly.jpg\" style=\"height: 300px\" title=\"PROGRAM AND SYSTEM ANOMALY DETECTION\"/>\n</a>\n</figure>\n<div class=\"entry-container\">\n<header class=\"entry-header\">\n<h1 class=\"entry-title\">\n<a href=\"#\" title=\"PROGRAM AND SYSTEM ANOMALY DETECTION\">PROGRAM AND SYSTEM ANOMALY DETECTION</a>\n</h1>\n</header>\n<div class=\"entry-content\" style=\"font-size: small\">\n                        Program and system anomaly detection  analyzes normal program and system behaviors and discovers aberrant executions caused by attacks, misconfigurations, program bugs, and unusual usage patterns.\n                        It was first introduced as an analogy between intrusion detection for programs and the immune mechanism in biology.\n                        Program and system anomaly detection has been a long-standing security approach with versatile applications, ranging from securing server programs in critical environments, to detecting insider threats in enterprises, to anti-abuse detection for online social networks\n                        <br/>\n<br/>\n\n                            Despite the seemingly diverse application domains, anomaly detection solutions share similar technical challenges, such as how\n                            to accurately recognize various normal patterns, how to reduce false alarms, how to adapt to\n                            concept drifts, and how to minimize performance impact. They also share similar detection\n                            approaches and evaluation methods, such as feature extraction, dimension reduction, and experimental evaluation\n                        \n                        Among many contributions to the diverse domain of anomaly detection, to list a few we have worked on developing machine learning algorithms to detect diverse normal call-correlation patterns <a href=\"http://people.cs.vt.edu/naren/papers/ccsfp309-shu.pdf\">(CCS '15)</a>, formal\n                        framwork for program anamoly detection <a href=\"http://people.cs.vt.edu/danfeng/papers/RAID-2015-Yao.pdf\">(RAID '16)</a> , and context sensitive probabilistic reasoning of program behaviours <a href=\"http://people.cs.vt.edu/danfeng/papers/HMM-DSN-2016-Yao.pdf\">(DSN '16)</a>.\n                        Our <a href=\"https://dl.acm.org/citation.cfm?id=2976750\">CCS '16 </a>turotial introduces  the problem of program attacks and the anomaly detection approach against threats.\n                        \n\n                        Our book titled <a href=\"https://www.morganclaypool.com/doi/10.2200/S00800ED1V01Y201709SPT022\">Anomaly Detection  as a Service <em>Challenges, Advances, and Opportunities</em></a> highlights the real-world adoption and deployment\n                        of anomaly detection technologies, by systematizing the body of existing knowledge on anomaly\n                        detection. This book is focused on data-driven anomaly detection for software, systems, and networks against advanced exploits and attacks, but also touches on a number of applications, including fraud detection and insider threat\n                        <!--\n                        We will give a general definition for program anomaly detection and derive model abstractions from the definition.\n                        The audience will be walked through the development of program anomaly detection methods from early-age n-gram approaches to complicated pushdown automata and probabilistic models.\n                        Some lab tools will be provided to help understand primitive detection models.\n                        This procedure will help the audience understand the objectives and challenges in designing program anomaly detection models.\n                        We will discuss the attacks that subvert anomaly detection mechanisms. The field map of program anomaly detection will be presented.\n                        We will also briefly discuss the applications of program anomaly detection in Internet of Things security.\n                        We expect the audience to get an idea of unsolved challenges in the field and develop a sense of future program anomaly detection directions after attending the tutorial.\n                        -->\n<!--\n                        \n                            The conventional attack model assuming a stand-alone malware app may be inadequate for mobile security. Multiple apps can collude to leak sensitive information or abuse system resources.\n                        \n                        \n                            Existing methods are not designed to defend against such sophisticated collusion attacks on Android. New program analysis and classification techniques on pairs or chains of apps are needed.\n                        \n                        \n                            Scalability and false alarms are two foremost research challenges. Our new AsiaCCS '17 work computes the collusion threats of more than 100,000 Android apps.\n                        \n                    \n                    -->\n<!-- .entry-container -->\n</article>\n<!-- .featued-content-wrap -->\n</section>\n<div id=\"content-sidebar-wrap\">"]}